import pytz
from django.db.models import Sum
from rest_framework import mixins, status
from rest_framework.response import Response
from rest_framework.viewsets import GenericViewSet
from django.utils import timezone
from django.db.models import Q
from hurry.filesize import size, verbose
from decimal import Decimal, ROUND_HALF_UP
from Admin.models import Company
from Basic.company_decorators import CompanyUserAuthentication
from Basic.constants import ERROR, REST_ERR_GENERIC, MESSAGE, SUCCESS
from Basic.models import (CompanySessions, ClientCaseContract, MiscellaneousFee, FinancialResponsible,
                          BillingInstallmentPaidSummary, ContractDiscountRefundTransaction, EmployeesProfile,
                          BillingRetainerHistory, MultipleCases, TransactionSummaryLeaves, BillingRetainerHistoryLeaves,
                          BillingTransactionLeaves, FixedBillingTransactionHistory, PriceQuoteServiceRequest,
                          PriceQuote, ClientReservationContract)
from Basic.serializer import WalletDailPaymentBreakDownSerializer, \
    ReservationConsalatationPaymentBreakDownSerializer, BillingTransactionLeavesSerializer, \
    BillingRetainerLeavesSerializer, TransactionSummaryLeavesSerializer, BillingRetainerLeavesDetailSerializer, \
    TransactionSummaryLeavesDetailSerializer, BillingTransactionLeavesDetailSerializer
from LMS_Backend.settings import python_base_url
from ReservationManagement.models import ReservationConsalatation
from utils import get_reservation_amount, get_primary_beneficiary, get_case_category, get_case_ids, \
    get_installment_count


class DailyPaymentLogsViewSet(mixins.ListModelMixin,
                              GenericViewSet):
    authentication_classes = (CompanyUserAuthentication,)

    def list(self, request, *args, **kwargs):
        try:
            auth_token = request.META['HTTP_AUTHORIZATION']
            user = CompanySessions.objects.filter(auth_token__exact=auth_token, is_active=True).last().user
            date = request.GET.get('date')
            # reservation logs
            reservation = ReservationConsalatation.objects.filter(office__id=user.office.id, payment_status=1,
                                                                  payment_date__date=date).order_by('-id')
            # attorney fee logs date wise
            attorney_fee = list()
            billing_summary = BillingInstallmentPaidSummary.objects.filter(Q(payment_toward_principle__gt=0) |
                                                                           Q(payment_toward_fine__gt=0),
                                                                           created_at__date=date,
                                                                           payment_method__in=[1, 2, 3, 5, 6],
                                                                           installment__office__id=user.office.id).order_by(
                '-id')
            for installment in billing_summary:
                installment_dictionary = dict()
                utc_datetime = installment.created_at.replace(tzinfo=timezone.utc)
                desired_timezone = pytz.timezone(user.company.timezone)  # Adjust to your desired timezone
                installment_date = utc_datetime.astimezone(desired_timezone)
                installment_dictionary['created_at'] = installment_date
                # installment_dictionary['created_at'] = installment.created_at
                if installment.received_by:
                    if installment.received_by.employee:
                        received_by = (
                                          installment.received_by.employee.first_name if installment.received_by else "") + " " + (
                                          installment.received_by.employee.last_name if installment.received_by else "")
                    elif installment.received_by.company:
                        received_by = installment.received_by.company.title if installment.received_by else ""
                    else:
                        received_by = ""
                else:
                    received_by = ""
                installment_dictionary['received_by'] = received_by
                installment_dictionary[
                    'payment_toward_fine'] = installment.payment_toward_fine if installment.payment_toward_fine else 0
                installment_dictionary[
                    'payment_toward_principle'] = installment.payment_toward_principle if installment.payment_toward_principle else 0
                installment_dictionary['payment_method'] = installment.payment_method
                installment_dictionary[
                    'attorney_service_charges'] = installment.attorney_service_charges if installment.attorney_service_charges else 0
                installment_dictionary[
                    'fine_service_charges'] = installment.fine_service_charges if installment.fine_service_charges else 0
                installment_dictionary['amount'] = 0
                installment_dictionary['installment'] = installment.installment.id
                installment_dictionary['transaction_type'] = installment.transaction_type
                financial = FinancialResponsible.objects.filter(
                    price_quote_contract__id=installment.installment.client_contract.id).last()
                name = financial.client.name
                contract = installment.installment.client_contract.client_contract_id
                client_ = ClientCaseContract.objects.filter(
                    contract__id=installment.installment.client_contract.id).last()
                if client_:
                    client_id = client_.client.client_id
                elif installment.installment.client_contract.client:
                    client_id = installment.installment.client_contract.client.client_id
                else:
                    client_id = ''
                installment_dictionary['name'] = name if name else ""
                installment_dictionary['contract_id'] = contract if contract else ""
                installment_dictionary['client_id'] = client_id if client_id else ""
                attorney_fee.append(installment_dictionary)
            # principle_fee = DailPaymentBreakDownSerializer(billing_summary, many=True).data
            # attorney_fee.append(principle_fee)
            refund = ContractDiscountRefundTransaction.objects.filter(Q(principle__gt=0) |
                                                                      Q(fine__gt=0), created_at__date=date,
                                                                      adjustment_type='refund')
            for installment_amount in refund:
                refund_dictionary = dict()
                utc_datetime = installment_amount.created_at.replace(tzinfo=timezone.utc)
                desired_timezone = pytz.timezone(user.company.timezone)  # Adjust to your desired timezone
                installment_amount_date = utc_datetime.astimezone(desired_timezone)
                refund_dictionary['created_at'] = installment_amount_date
                if installment_amount.created_by:
                    if installment_amount.created_by.employee:
                        received_by = (
                                          installment_amount.created_by.employee.first_name if installment_amount.created_by else "") + " " + (
                                          installment_amount.created_by.employee.last_name if installment_amount.created_by else "")
                    elif installment_amount.created_by.company:
                        received_by = installment_amount.created_by.company.title if installment_amount.created_by else ""
                    else:
                        received_by = ""
                else:
                    received_by = ""
                refund_dictionary['received_by'] = received_by
                amount = (installment_amount.principle if installment_amount.principle else 0) + (
                    installment_amount.fne if installment_amount.fine else 0)
                total_amount = '-{}'.format(amount)
                total_amount_int = float(total_amount)
                refund_dictionary['amount'] = total_amount_int
                financial = FinancialResponsible.objects.filter(
                    price_quote_contract__id=installment_amount.client_contract.id).last()
                name = financial.client.name
                refund_dictionary['name'] = name if name else ""
                contract = installment_amount.client_contract.client_contract_id
                client_ = ClientCaseContract.objects.filter(
                    contract__id=installment_amount.client_contract.id).last()
                if client_:
                    client_id = client_.client.client_id
                elif installment_amount.client_contract.client:
                    client_id = installment_amount.client_contract.client.client_id
                else:
                    client_id = ''
                refund_dictionary['contract_id'] = contract if contract else ""
                refund_dictionary['client_id'] = client_id if client_id else ""
                refund_dictionary['payment_method'] = 8
                refund_dictionary['payment_toward_fine'] = 0
                refund_dictionary['payment_toward_principle'] = 0
                attorney_fee.append(refund_dictionary)
            # refund_fee = BillingRefundAmountBreakDownSerializer(refund, many=True).data
            # attorney_fee.append(refund_fee)

            # Govt fee logs date wise
            goverment_fee = list()
            gov_billing_summary = MiscellaneousFee.objects.filter(created_at__date=date,
                                                                  type='government_fee',
                                                                  status=5, office__id=user.office.id).order_by(
                '-created_at')
            for gov_billing in gov_billing_summary:
                gov_dictionary = dict()
                utc_datetime = gov_billing.created_at.replace(tzinfo=timezone.utc)
                desired_timezone = pytz.timezone(user.company.timezone)  # Adjust to your desired timezone
                gov_billing_date = utc_datetime.astimezone(desired_timezone)
                gov_dictionary['created_at'] = gov_billing_date
                if gov_billing.created_by:
                    if gov_billing.created_by.employee:
                        received_by = (
                                          gov_billing.created_by.employee.first_name if gov_billing.created_by else "") + " " + (
                                          gov_billing.created_by.employee.last_name if gov_billing.created_by else "")
                    elif gov_billing.created_by.company:
                        received_by = gov_billing.created_by.company.title if gov_billing.created_by else ""
                    else:
                        received_by = ""
                else:
                    received_by = ""
                gov_dictionary['received_by'] = received_by
                if gov_billing.status == 3 or gov_billing.status == 7:
                    amount = gov_billing.amount if gov_billing.amount else 0
                    total_amount = '-{}'.format(amount)
                    total_amount_int = float(total_amount)
                    gov_dictionary['paid_government_fee'] = total_amount_int
                else:
                    gov_dictionary['paid_government_fee'] = gov_billing.amount if gov_billing.amount else 0
                gov_dictionary['payment_method'] = gov_billing.payment_method
                gov_dictionary[
                    'gov_service_charges'] = gov_billing.gov_service_charges if gov_billing.gov_service_charges else 0
                gov_dictionary['status'] = gov_billing.status
                gov_dictionary['installment'] = gov_billing.installment.id
                gov_dictionary['amount'] = 0
                financial = FinancialResponsible.objects.filter(
                    price_quote_contract__id=gov_billing.installment.client_contract.id).last()
                name = financial.client.name
                contract = gov_billing.installment.client_contract.client_contract_id
                client_ = ClientCaseContract.objects.filter(
                    contract__id=gov_billing.installment.client_contract.id).last()
                if client_:
                    client_id = client_.client.client_id
                elif gov_billing.installment.client_contract.client:
                    client_id = gov_billing.installment.client_contract.client.client_id
                else:
                    client_id = ''
                gov_dictionary['name'] = name if name else ""
                gov_dictionary['contract_id'] = contract if contract else ""
                gov_dictionary['client_id'] = client_id if client_id else ""
                goverment_fee.append(gov_dictionary)
            # discount goverment fee
            discount_goverment_fee = list()
            gov_discount_summary = MiscellaneousFee.objects.filter(created_at__date=date,
                                                                   type='government_fee',
                                                                   status=6, office__id=user.office.id).order_by(
                '-created_at')
            for gov_discount in gov_discount_summary:
                gov_discount_dictionary = dict()
                utc_datetime = gov_discount.created_at.replace(tzinfo=timezone.utc)
                desired_timezone = pytz.timezone(user.company.timezone)  # Adjust to your desired timezone
                gov_discount_date = utc_datetime.astimezone(desired_timezone)
                gov_discount_dictionary['created_at'] = gov_discount_date
                # gov_discount_dictionary['created_at'] = gov_discount.created_at
                if gov_discount.created_by:
                    if gov_discount.created_by.employee:
                        received_by = (
                                          gov_discount.created_by.employee.first_name if gov_discount.created_by else "") + " " + (
                                          gov_discount.created_by.employee.last_name if gov_discount.created_by else "")
                    elif gov_discount.created_by.company:
                        received_by = gov_discount.created_by.company.title if gov_discount.created_by else ""
                    else:
                        received_by = ""
                else:
                    received_by = ""
                gov_discount_dictionary['received_by'] = received_by
                gov_discount_dictionary['paid_government_fee'] = gov_discount.amount if gov_discount.amount else 0
                gov_discount_dictionary['payment_method'] = gov_discount.payment_method
                gov_discount_dictionary['status'] = gov_discount.status
                gov_discount_dictionary['installment'] = gov_discount.installment.id
                gov_discount_dictionary['amount'] = 0
                financial = FinancialResponsible.objects.filter(
                    price_quote_contract__id=gov_discount.installment.client_contract.id).last()
                name = financial.client.name
                contract = gov_discount.installment.client_contract.client_contract_id
                client_ = ClientCaseContract.objects.filter(
                    contract__id=gov_discount.installment.client_contract.id).last()
                if client_:
                    client_id = client_.client.client_id
                elif gov_discount.installment.client_contract.client:
                    client_id = gov_discount.installment.client_contract.client.client_id
                else:
                    client_id = ''
                gov_discount_dictionary['name'] = name if name else ""
                gov_discount_dictionary['contract_id'] = contract if contract else ""
                gov_discount_dictionary['client_id'] = client_id if client_id else ""
                discount_goverment_fee.append(gov_discount_dictionary)
            # adjustment gov fee log
            adjustment_goverment_fee = list()
            gov_adjustment_summary = MiscellaneousFee.objects.filter(created_at__date=date,
                                                                     type='government_fee',
                                                                     status__in=[7, 8],
                                                                     office__id=user.office.id).order_by(
                '-created_at')
            for gov_adjustment in gov_adjustment_summary:
                gov_adjustment_dictionary = dict()
                utc_datetime = gov_adjustment.created_at.replace(tzinfo=timezone.utc)
                desired_timezone = pytz.timezone(user.company.timezone)  # Adjust to your desired timezone
                gov_adjustment_date = utc_datetime.astimezone(desired_timezone)
                gov_adjustment_dictionary['created_at'] = gov_adjustment_date
                # gov_adjustment_dictionary['created_at'] = gov_adjustment.created_at
                if gov_adjustment.created_by:
                    if gov_adjustment.created_by.employee:
                        received_by = (
                                          gov_adjustment.created_by.employee.first_name if gov_adjustment.created_by else "") + " " + (
                                          gov_adjustment.created_by.employee.last_name if gov_adjustment.created_by else "")
                    elif gov_adjustment.created_by.company:
                        received_by = gov_adjustment.created_by.company.title if gov_adjustment.created_by else ""
                    else:
                        received_by = ""
                else:
                    received_by = ""
                gov_adjustment_dictionary['received_by'] = received_by
                gov_adjustment_dictionary['paid_government_fee'] = gov_adjustment.amount if gov_adjustment.amount else 0
                gov_adjustment_dictionary['payment_method'] = gov_adjustment.payment_method
                gov_adjustment_dictionary['status'] = gov_adjustment.status
                gov_adjustment_dictionary['installment'] = gov_adjustment.installment.id
                gov_adjustment_dictionary['amount'] = 0
                financial = FinancialResponsible.objects.filter(
                    price_quote_contract__id=gov_adjustment.installment.client_contract.id).last()
                name = financial.client.name
                contract = gov_adjustment.installment.client_contract.client_contract_id
                client_ = ClientCaseContract.objects.filter(
                    contract__id=gov_adjustment.installment.client_contract.id).last()
                if client_:
                    client_id = client_.client.client_id
                elif gov_adjustment.installment.client_contract.client:
                    client_id = gov_adjustment.installment.client_contract.client.client_id
                else:
                    client_id = ''
                gov_adjustment_dictionary['name'] = name if name else ""
                gov_adjustment_dictionary['contract_id'] = contract if contract else ""
                gov_adjustment_dictionary['client_id'] = client_id if client_id else ""
                adjustment_goverment_fee.append(gov_adjustment_dictionary)
            # refund gov fee log
            refund_goverment_fees = list()
            gov_refund_summary = MiscellaneousFee.objects.filter(created_at__date=date,
                                                                 type='government_fee',
                                                                 status=3, office__id=user.office.id).order_by(
                '-created_at')
            for gov_refund in gov_refund_summary:
                gov_refund_dictionary = dict()
                utc_datetime = gov_refund.created_at.replace(tzinfo=timezone.utc)
                desired_timezone = pytz.timezone(user.company.timezone)  # Adjust to your desired timezone
                gov_refund_date = utc_datetime.astimezone(desired_timezone)
                gov_refund_dictionary['created_at'] = gov_refund_date
                # gov_refund_dictionary['created_at'] = gov_refund.created_at
                if gov_refund.created_by:
                    if gov_refund.created_by.employee:
                        received_by = (
                                          gov_refund.created_by.employee.first_name if gov_refund.created_by else "") + " " + (
                                          gov_refund.created_by.employee.last_name if gov_refund.created_by else "")
                    elif gov_refund.created_by.company:
                        received_by = gov_refund.created_by.company.title if gov_refund.created_by else ""
                    else:
                        received_by = ""
                else:
                    received_by = ""
                gov_refund_dictionary['received_by'] = received_by
                gov_refund_dictionary['paid_government_fee'] = gov_refund.amount if gov_refund.amount else 0
                gov_refund_dictionary['payment_method'] = gov_refund.payment_method
                gov_refund_dictionary['status'] = gov_refund.status
                gov_refund_dictionary['installment'] = gov_refund.installment.id
                gov_refund_dictionary['amount'] = 0
                financial = FinancialResponsible.objects.filter(
                    price_quote_contract__id=gov_refund.installment.client_contract.id).last()
                name = financial.client.name
                contract = gov_refund.installment.client_contract.client_contract_id
                client_ = ClientCaseContract.objects.filter(
                    contract__id=gov_refund.installment.client_contract.id).last()
                if client_:
                    client_id = client_.client.client_id
                elif gov_refund.installment.client_contract.client:
                    client_id = gov_refund.installment.client_contract.client.client_id
                else:
                    client_id = ''
                gov_refund_dictionary['name'] = name if name else ""
                gov_refund_dictionary['contract_id'] = contract if contract else ""
                gov_refund_dictionary['client_id'] = client_id if client_id else ""
                refund_goverment_fees.append(gov_refund_dictionary)

            # Mis fee logs date wise
            mis_fee = list()
            mis_billing_summary = MiscellaneousFee.objects.filter(created_at__date=date,
                                                                  type='miscellaneous',
                                                                  status=5, office__id=user.office.id).order_by(
                '-created_at')
            for mis_billing in mis_billing_summary:
                mis_dictionary = dict()
                if mis_billing.created_by:
                    if mis_billing.created_by.employee:
                        received_by = (
                                          mis_billing.created_by.employee.first_name if mis_billing.created_by else "") + " " + (
                                          mis_billing.created_by.employee.last_name if mis_billing.created_by else "")
                    elif mis_billing.created_by.company:
                        received_by = mis_billing.created_by.company.title if mis_billing.created_by else ""
                    else:
                        received_by = ""
                else:
                    received_by = ""
                utc_datetime = mis_billing.created_at.replace(tzinfo=timezone.utc)
                desired_timezone = pytz.timezone(user.company.timezone)  # Adjust to your desired timezone
                mis_billing_date = utc_datetime.astimezone(desired_timezone)
                mis_dictionary['created_at'] = mis_billing_date
                # mis_dictionary['created_at'] = mis_billing.created_at
                mis_dictionary['received_by'] = received_by
                if mis_billing.status == 3 or mis_billing.status == 7:
                    amount = mis_billing.amount if mis_billing.amount else 0
                    total_amount = '-{}'.format(amount)
                    total_amount_int = float(total_amount)
                    mis_dictionary['paid_miscellaneous_fee'] = total_amount_int
                else:
                    mis_dictionary['paid_miscellaneous_fee'] = mis_billing.amount if mis_billing.amount else 0
                mis_dictionary['payment_method'] = mis_billing.payment_method
                mis_dictionary[
                    'mis_service_charges'] = mis_billing.mis_service_charges if mis_billing.mis_service_charges else 0
                mis_dictionary['status'] = mis_billing.status
                mis_dictionary['installment'] = mis_billing.installment.id
                mis_dictionary['amount'] = 0
                financial = FinancialResponsible.objects.filter(
                    price_quote_contract__id=mis_billing.installment.client_contract.id).last()
                name = financial.client.name
                contract = mis_billing.installment.client_contract.client_contract_id
                client_id = ''
                client_ = ClientCaseContract.objects.filter(
                    contract__id=mis_billing.installment.client_contract.id).last()
                if client_:
                    client_id = client_.client.client_id
                elif mis_billing.installment.client_contract.client:
                    client_id = mis_billing.installment.client_contract.client.client_id
                else:
                    client_id = ''
                mis_dictionary['name'] = name if name else ""
                mis_dictionary['contract_id'] = contract if contract else ""
                mis_dictionary['client_id'] = client_id if client_id else ""
                mis_fee.append(mis_dictionary)
            # discount mis fee
            discount_mis_fee = list()
            mis_discount_summary = MiscellaneousFee.objects.filter(created_at__date=date,
                                                                   type='miscellaneous', status=6,
                                                                   office__id=user.office.id).order_by(
                '-created_at')
            for mis_discount in mis_discount_summary:
                mis_discount_dictionary = dict()
                utc_datetime = mis_discount.created_at.replace(tzinfo=timezone.utc)
                desired_timezone = pytz.timezone(user.company.timezone)  # Adjust to your desired timezone
                mis_discount_date = utc_datetime.astimezone(desired_timezone)
                mis_discount_dictionary['created_at'] = mis_discount_date
                # mis_discount_dictionary['created_at'] = mis_discount.created_at
                if mis_discount.created_by:
                    if mis_discount.created_by.employee:
                        received_by = (
                                          mis_discount.created_by.employee.first_name if mis_discount.created_by else "") + " " + (
                                          mis_discount.created_by.employee.last_name if mis_discount.created_by else "")
                    elif mis_discount.created_by.company:
                        received_by = mis_discount.created_by.company.title if mis_discount.created_by else ""
                    else:
                        received_by = ""
                else:
                    received_by = ""
                mis_discount_dictionary['received_by'] = received_by
                mis_discount_dictionary['paid_miscellaneous_fee'] = mis_discount.amount if mis_discount.amount else 0
                mis_discount_dictionary['payment_method'] = mis_discount.payment_method
                mis_discount_dictionary['status'] = mis_discount.status
                mis_discount_dictionary['installment'] = mis_discount.installment.id
                mis_discount_dictionary['amount'] = 0
                financial = FinancialResponsible.objects.filter(
                    price_quote_contract__id=mis_discount.installment.client_contract.id).last()
                name = financial.client.name
                contract = mis_discount.installment.client_contract.client_contract_id
                client_ = ClientCaseContract.objects.filter(
                    contract__id=mis_discount.installment.client_contract.id).last()
                if client_:
                    client_id = client_.client.client_id
                elif mis_discount.installment.client_contract.client:
                    client_id = mis_discount.installment.client_contract.client.client_id
                else:
                    client_id = ''
                mis_discount_dictionary['name'] = name if name else ""
                mis_discount_dictionary['contract_id'] = contract if contract else ""
                mis_discount_dictionary['client_id'] = client_id if client_id else ""
                discount_mis_fee.append(mis_discount_dictionary)
            # refund mis fee log
            refund_mis_fee = list()
            mis_refund_summary = MiscellaneousFee.objects.filter(created_at__date=date,
                                                                 type='miscellaneous', status=3,
                                                                 office__id=user.office.id).order_by('-created_at')
            for mis_refund in mis_refund_summary:
                mis_refund_dictionary = dict()
                utc_datetime = mis_refund.created_at.replace(tzinfo=timezone.utc)
                desired_timezone = pytz.timezone(user.company.timezone)  # Adjust to your desired timezone
                mis_refund_date = utc_datetime.astimezone(desired_timezone)
                mis_refund_dictionary['created_at'] = mis_refund_date
                # mis_refund_dictionary['created_at'] = mis_refund.created_at
                if mis_refund.created_by:
                    if mis_refund.created_by.employee:
                        received_by = (
                                          mis_refund.created_by.employee.first_name if mis_refund.created_by else "") + " " + (
                                          mis_refund.created_by.employee.last_name if mis_refund.created_by else "")
                    elif mis_refund.created_by.company:
                        received_by = mis_refund.created_by.company.title if mis_refund.created_by else ""
                    else:
                        received_by = ""
                else:
                    received_by = ""
                mis_refund_dictionary['received_by'] = received_by
                mis_refund_dictionary['paid_miscellaneous_fee'] = mis_refund.amount if mis_refund.amount else 0
                mis_refund_dictionary['payment_method'] = mis_refund.payment_method
                mis_refund_dictionary['status'] = mis_refund.status
                mis_refund_dictionary['installment'] = mis_refund.installment.id
                mis_refund_dictionary['amount'] = 0
                financial = FinancialResponsible.objects.filter(
                    price_quote_contract__id=mis_refund.installment.client_contract.id).last()
                name = financial.client.name
                contract = mis_refund.installment.client_contract.client_contract_id
                client_ = ClientCaseContract.objects.filter(
                    contract__id=mis_refund.installment.client_contract.id).last()
                if client_:
                    client_id = client_.client.client_id
                elif mis_refund.installment.client_contract.client:
                    client_id = mis_refund.installment.client_contract.client.client_id
                else:
                    client_id = ''
                mis_refund_dictionary['name'] = name if name else ""
                mis_refund_dictionary['contract_id'] = contract if contract else ""
                mis_refund_dictionary['client_id'] = client_id if client_id else ""
                refund_mis_fee.append(mis_refund_dictionary)
            # adjustment mis fee log
            adjustment_mis_fee = list()
            mis_adjustment_summary = MiscellaneousFee.objects.filter(created_at__date=date,
                                                                     type='miscellaneous', status__in=[7, 8],
                                                                     office__id=user.office.id).order_by(
                '-created_at')
            for mis_adjustment in mis_adjustment_summary:
                mis_adjustment_dictionary = dict()
                utc_datetime = mis_adjustment.created_at.replace(tzinfo=timezone.utc)
                desired_timezone = pytz.timezone(user.company.timezone)  # Adjust to your desired timezone
                mis_adjustment_date = utc_datetime.astimezone(desired_timezone)
                mis_adjustment_dictionary['created_at'] = mis_adjustment_date
                # mis_adjustment_dictionary['created_at'] = mis_adjustment.created_at
                if mis_adjustment.created_by:
                    if mis_adjustment.created_by.employee:
                        received_by = (
                                          mis_adjustment.created_by.employee.first_name if mis_adjustment.created_by else "") + " " + (
                                          mis_adjustment.created_by.employee.last_name if mis_adjustment.created_by else "")
                    elif mis_adjustment.created_by.company:
                        received_by = mis_adjustment.created_by.company.title if mis_adjustment.created_by else ""
                    else:
                        received_by = ""
                else:
                    received_by = ""
                mis_adjustment_dictionary['received_by'] = received_by
                mis_adjustment_dictionary[
                    'paid_miscellaneous_fee'] = mis_adjustment.amount if mis_adjustment.amount else 0
                mis_adjustment_dictionary['payment_method'] = mis_adjustment.payment_method
                mis_adjustment_dictionary['status'] = mis_adjustment.status
                mis_adjustment_dictionary['installment'] = mis_adjustment.installment.id
                mis_adjustment_dictionary['amount'] = 0
                financial = FinancialResponsible.objects.filter(
                    price_quote_contract__id=mis_adjustment.installment.client_contract.id).last()
                name = financial.client.name
                contract = mis_adjustment.installment.client_contract.client_contract_id
                client_ = ClientCaseContract.objects.filter(
                    contract__id=mis_adjustment.installment.client_contract.id).last()
                if client_:
                    client_id = client_.client.client_id
                elif mis_adjustment.installment.client_contract.client:
                    client_id = mis_adjustment.installment.client_contract.client.client_id
                else:
                    client_id = ''
                mis_adjustment_dictionary['name'] = name if name else ""
                mis_adjustment_dictionary['contract_id'] = contract if contract else ""
                mis_adjustment_dictionary['client_id'] = client_id if client_id else ""
                adjustment_mis_fee.append(mis_adjustment_dictionary)
            # service charges list
            service_charges_fee = list()
            charges_summary = BillingInstallmentPaidSummary.objects.filter(Q(attorney_service_charges__gt=0) |
                                                                           Q(fine_service_charges__gt=0),
                                                                           created_at__date=date,
                                                                           installment__office__id=user.office.id).order_by(
                '-created_at')
            for service in charges_summary:
                service_dictionary = dict()
                utc_datetime = service.created_at.replace(tzinfo=timezone.utc)
                desired_timezone = pytz.timezone(user.company.timezone)  # Adjust to your desired timezone
                service_date = utc_datetime.astimezone(desired_timezone)
                service_dictionary['created_at'] = service_date
                if service.received_by:
                    if service.received_by.employee:
                        received_by = (
                                          service.received_by.employee.first_name if service.received_by else "") + " " + (
                                          service.received_by.employee.last_name if service.received_by else "")
                    elif service.received_by.company:
                        received_by = service.received_by.company.title if service.received_by else ""
                    else:
                        received_by = ""
                else:
                    received_by = ""
                service_dictionary['received_by'] = received_by
                service_dictionary[
                    'payment_toward_fine'] = service.payment_toward_fine if service.payment_toward_fine else 0
                service_dictionary[
                    'fine_service_charges'] = service.fine_service_charges if service.fine_service_charges else 0
                service_dictionary[
                    'payment_toward_principle'] = service.payment_toward_principle if service.payment_toward_principle else 0
                service_dictionary[
                    'attorney_service_charges'] = service.attorney_service_charges if service.attorney_service_charges else 0
                service_dictionary['payment_method'] = service.payment_method
                service_dictionary['fee_type'] = 'Attorney'
                service_dictionary[
                    'attorney_service_charges'] = service.attorney_service_charges if service.attorney_service_charges else 0
                service_dictionary[
                    'fine_service_charges'] = service.fine_service_charges if service.fine_service_charges else 0
                service_dictionary['amount'] = 0
                service_dictionary['installment'] = service.installment.id
                financial = FinancialResponsible.objects.filter(
                    price_quote_contract__id=service.installment.client_contract.id).last()
                name = financial.client.name
                contract = service.installment.client_contract.client_contract_id
                client_ = ClientCaseContract.objects.filter(
                    contract__id=service.installment.client_contract.id).last()
                if client_:
                    client_id = client_.client.client_id
                elif service.installment.client_contract.client:
                    client_id = service.installment.client_contract.client.client_id
                else:
                    client_id = ''
                service_dictionary['name'] = name if name else ""
                service_dictionary['contract_id'] = contract if contract else ""
                service_dictionary['client_id'] = client_id if client_id else ""
                service_charges_fee.append(service_dictionary)
            Gov_service = MiscellaneousFee.objects.filter(Q(gov_service_charges__gt=0) |
                                                          Q(mis_service_charges__gt=0), created_at__date=date,
                                                          office__id=user.office.id).order_by('-created_at')
            for service_amount in Gov_service:
                gov_service_dictionary = dict()
                utc_datetime = service_amount.created_at.replace(tzinfo=timezone.utc)
                desired_timezone = pytz.timezone(user.company.timezone)  # Adjust to your desired timezone
                service_amount_date = utc_datetime.astimezone(desired_timezone)
                gov_service_dictionary['created_at'] = service_amount_date
                if service_amount.created_by:
                    if service_amount.created_by.employee:
                        received_by = (
                                          service_amount.created_by.employee.first_name if service_amount.created_by else "") + " " + (
                                          service_amount.created_by.employee.last_name if service_amount.created_by else "")
                    elif service_amount.created_by.company:
                        received_by = service_amount.created_by.company.title if service_amount.created_by else ""
                    else:
                        received_by = ""
                else:
                    received_by = ""
                gov_service_dictionary['received_by'] = received_by
                gov_service_dictionary['created_at'] = service_amount.created_at
                gov_service_dictionary['received_by'] = received_by
                if service_amount.type == 'government_fee':
                    gov_service_dictionary[
                        'paid_government_fee'] = service_amount.amount if service_amount.amount else 0
                    gov_service_dictionary[
                        'gov_service_charges'] = service_amount.gov_service_charges if service_amount.gov_service_charges else 0
                    gov_service_dictionary['fee_type'] = 'goverment'
                else:
                    gov_service_dictionary['paid_government_fee'] = 0
                    gov_service_dictionary['gov_service_charges'] = 0
                if service_amount.type == 'miscellaneous':
                    gov_service_dictionary[
                        'paid_miscellaneous_fee'] = service_amount.amount if service_amount.amount else 0
                    gov_service_dictionary[
                        'mis_service_charges'] = service_amount.mis_service_charges if service_amount.mis_service_charges else 0
                    gov_service_dictionary['fee_type'] = 'miscellaneous'
                else:
                    gov_service_dictionary['paid_miscellaneous_fee'] = 0
                    gov_service_dictionary['mis_service_charges'] = 0
                gov_service_dictionary['payment_method'] = service_amount.payment_method
                gov_service_dictionary[
                    'mis_service_charges'] = service_amount.mis_service_charges if service_amount.mis_service_charges else 0
                gov_service_dictionary['status'] = service_amount.status
                gov_service_dictionary['installment'] = service_amount.installment.id
                gov_service_dictionary['amount'] = 0
                financial = FinancialResponsible.objects.filter(
                    price_quote_contract__id=service_amount.installment.client_contract.id).last()
                name = financial.client.name
                contract = service_amount.installment.client_contract.client_contract_id
                client_ = ClientCaseContract.objects.filter(
                    contract__id=service_amount.installment.client_contract.id).last()
                if client_:
                    client_id = client_.client.client_id
                elif service_amount.installment.client_contract.client:
                    client_id = service_amount.installment.client_contract.client.client_id
                else:
                    client_id = ''
                gov_service_dictionary['name'] = name if name else ""
                gov_service_dictionary['contract_id'] = contract if contract else ""
                gov_service_dictionary['client_id'] = client_id if client_id else ""
                service_charges_fee.append(gov_service_dictionary)
            # Wallet logs date wise
            wallet_billing_summary = BillingInstallmentPaidSummary.objects.filter(wallet__gt=0,
                                                                                  created_at__date=date,
                                                                                  payment_method__in=[1, 2, 3, 5,
                                                                                                      6]).order_by(
                '-id')
            discount_fee = list()
            discount_summary = BillingInstallmentPaidSummary.objects.filter(Q(payment_toward_principle__gt=0) |
                                                                            Q(payment_toward_fine__gt=0),
                                                                            created_at__date=date,
                                                                            payment_method=7,
                                                                            installment__office__id=user.office.id).order_by(
                '-id')
            for discount in discount_summary:
                discount_dictionary = dict()
                utc_datetime = discount.created_at.replace(tzinfo=timezone.utc)
                desired_timezone = pytz.timezone(user.company.timezone)  # Adjust to your desired timezone
                discount_date = utc_datetime.astimezone(desired_timezone)
                discount_dictionary['created_at'] = discount_date
                if discount.received_by:
                    if discount.received_by.employee:
                        received_by = (
                                          discount.received_by.employee.first_name if discount.received_by else "") + " " + (
                                          discount.received_by.employee.last_name if discount.received_by else "")
                    elif discount.received_by.company:
                        received_by = discount.received_by.company.title if discount.received_by else ""
                    else:
                        received_by = ""
                else:
                    received_by = ""
                discount_dictionary['received_by'] = received_by
                discount_dictionary[
                    'payment_toward_fine'] = discount.payment_toward_fine if discount.payment_toward_fine else 0
                # discount_dictionary['payment_toward_principle'] = discount.payment_toward_principle if discount.payment_toward_principle else 0
                discount_dictionary['payment_toward_principle'] = (
                                                                      discount.total_client_payment if discount.total_client_payment else 0) - (
                                                                      discount.payment_toward_fine if discount.payment_toward_fine else 0)
                discount_dictionary['payment_method'] = discount.payment_method
                discount_dictionary['installment'] = discount.installment.id
                discount_dictionary['transaction_type'] = discount.transaction_type
                financial = FinancialResponsible.objects.filter(
                    price_quote_contract__id=discount.installment.client_contract.id).last()
                name = financial.client.name
                contract = discount.installment.client_contract.client_contract_id
                client_ = ClientCaseContract.objects.filter(
                    contract__id=discount.installment.client_contract.id).last()
                if client_:
                    client_id = client_.client.client_id
                elif discount.installment.client_contract.client:
                    client_id = discount.installment.client_contract.client.client_id
                else:
                    client_id = ''
                discount_dictionary['name'] = name if name else ""
                discount_dictionary['contract_id'] = contract if contract else ""
                discount_dictionary['client_id'] = client_id if client_id else ""
                discount_fee.append(discount_dictionary)
            # refund logs
            refund_fee = list()
            refund_summary = BillingInstallmentPaidSummary.objects.filter(Q(payment_toward_principle__gt=0) |
                                                                          Q(payment_toward_fine__gt=0),
                                                                          created_at__date=date,
                                                                          payment_method=10,
                                                                          installment__office__id=user.office.id).order_by(
                '-id')
            for refund in refund_summary:
                refund_dictionary = dict()
                utc_datetime = refund.created_at.replace(tzinfo=timezone.utc)
                desired_timezone = pytz.timezone(user.company.timezone)  # Adjust to your desired timezone
                refund_date = utc_datetime.astimezone(desired_timezone)
                refund_dictionary['created_at'] = refund_date
                if refund.received_by:
                    if refund.received_by.employee:
                        received_by = (
                                          refund.received_by.employee.first_name if refund.received_by else "") + " " + (
                                          refund.received_by.employee.last_name if refund.received_by else "")
                    elif refund.received_by.company:
                        received_by = refund.received_by.company.title if refund.received_by else ""
                    else:
                        received_by = ""
                else:
                    received_by = ""
                refund_dictionary['received_by'] = received_by
                refund_dictionary[
                    'payment_toward_fine'] = refund.payment_toward_fine if refund.payment_toward_fine else 0
                refund_dictionary[
                    'payment_toward_principle'] = refund.payment_toward_principle if refund.payment_toward_principle else 0
                refund_dictionary['payment_method'] = refund.payment_method
                refund_dictionary['installment'] = refund.installment.id
                refund_dictionary['transaction_type'] = refund.transaction_type
                financial = FinancialResponsible.objects.filter(
                    price_quote_contract__id=refund.installment.client_contract.id).last()
                name = financial.client.name
                contract = refund.installment.client_contract.client_contract_id
                client_ = ClientCaseContract.objects.filter(
                    contract__id=refund.installment.client_contract.id).last()
                if client_:
                    client_id = client_.client.client_id
                elif refund.installment.client_contract.client:
                    client_id = refund.installment.client_contract.client.client_id
                else:
                    client_id = ''
                refund_dictionary['name'] = name if name else ""
                refund_dictionary['contract_id'] = contract if contract else ""
                refund_dictionary['client_id'] = client_id if client_id else ""
                refund_fee.append(refund_dictionary)
            # adjustment log
            adjustment_fee = list()
            adjustment_summary = BillingInstallmentPaidSummary.objects.filter(Q(payment_toward_principle__gt=0) |
                                                                              Q(payment_toward_fine__gt=0),
                                                                              created_at__date=date,
                                                                              payment_method__in=[9, 12],
                                                                              installment__office__id=user.office.id).order_by(
                '-id')
            for adjustment in adjustment_summary:
                adjustment_dictionary = dict()
                utc_datetime = adjustment.created_at.replace(tzinfo=timezone.utc)
                desired_timezone = pytz.timezone(user.company.timezone)  # Adjust to your desired timezone
                adjustment_date = utc_datetime.astimezone(desired_timezone)
                adjustment_dictionary['created_at'] = adjustment_date
                if adjustment.received_by:
                    if adjustment.received_by.employee:
                        received_by = (
                                          adjustment.received_by.employee.first_name if adjustment.received_by else "") + " " + (
                                          adjustment.received_by.employee.last_name if adjustment.received_by else "")
                    elif adjustment.received_by.company:
                        received_by = adjustment.received_by.company.title if adjustment.received_by else ""
                    else:
                        received_by = ""
                else:
                    received_by = ""
                adjustment_dictionary['received_by'] = received_by
                adjustment_dictionary[
                    'payment_toward_fine'] = adjustment.payment_toward_fine if adjustment.payment_toward_fine else 0
                adjustment_dictionary[
                    'payment_toward_principle'] = adjustment.payment_toward_principle if adjustment.payment_toward_principle else 0
                adjustment_dictionary['payment_method'] = adjustment.payment_method
                adjustment_dictionary['installment'] = adjustment.installment.id
                adjustment_dictionary['transaction_type'] = adjustment.transaction_type
                financial = FinancialResponsible.objects.filter(
                    price_quote_contract__id=adjustment.installment.client_contract.id).last()
                name = financial.client.name
                contract = adjustment.installment.client_contract.client_contract_id
                client_ = ClientCaseContract.objects.filter(
                    contract__id=adjustment.installment.client_contract.id).last()
                if client_:
                    client_id = client_.client.client_id
                elif refund.installment.client_contract.client:
                    client_id = adjustment.installment.client_contract.client.client_id
                else:
                    client_id = ''
                adjustment_dictionary['name'] = name if name else ""
                adjustment_dictionary['contract_id'] = contract if contract else ""
                adjustment_dictionary['client_id'] = client_id if client_id else ""
                adjustment_fee.append(adjustment_dictionary)
            summary_dict = dict()
            summary_dict['reservations'] = ReservationConsalatationPaymentBreakDownSerializer(reservation,
                                                                                              many=True).data
            summary_dict['paid_attorney_fee'] = attorney_fee
            summary_dict['paid_gov_fee'] = goverment_fee
            summary_dict['discount_goverment_fee'] = discount_goverment_fee
            summary_dict['refund_goverment_fee'] = refund_goverment_fees
            summary_dict['adjustment_goverment_fee'] = adjustment_goverment_fee
            summary_dict['paid_mis_fee'] = mis_fee
            summary_dict['discount_mis_fee'] = discount_mis_fee
            summary_dict['refund_mis_fee'] = refund_mis_fee
            summary_dict['adjustment_mis_fee'] = adjustment_mis_fee
            summary_dict['service_charges'] = service_charges_fee
            summary_dict['attorney_discount'] = discount_fee
            summary_dict['attorney_refund'] = refund_fee
            summary_dict['attorney_adjustment'] = adjustment_fee
            summary_dict['wallet'] = WalletDailPaymentBreakDownSerializer(wallet_billing_summary, many=True).data
            return Response(summary_dict, status=status.HTTP_200_OK)
        except Exception as e:
            return Response({ERROR: REST_ERR_GENERIC, MESSAGE: str(e)}, status=status.HTTP_400_BAD_REQUEST)


# retainer daily payment logs
class RetainerDailyPaymentLogsViewSet(mixins.ListModelMixin,
                                      GenericViewSet):
    authentication_classes = (CompanyUserAuthentication,)

    def list(self, request, *args, **kwargs):
        try:
            auth_token = request.META['HTTP_AUTHORIZATION']
            user = CompanySessions.objects.filter(auth_token__exact=auth_token, is_active=True).last().user
            date = request.GET.get('date')
            # retainer fee logs date wise
            attorney_fee = list()
            retainer_amount = BillingRetainerHistory.objects.filter(office__id=user.office.id, retainer_type=2,
                                                                    date=date).order_by('-id')
            for retainer in retainer_amount:
                retainer_dictionary = dict()
                utc_datetime = retainer.created_at.replace(tzinfo=timezone.utc)
                desired_timezone = pytz.timezone(user.company.timezone)  # Adjust to your desired timezone
                retainer_date = utc_datetime.astimezone(desired_timezone)
                retainer_dictionary['created_at'] = retainer.date if retainer.date else None
                if retainer.created_by:
                    if retainer.created_by.employee:
                        received_by = (
                                          retainer.created_by.employee.first_name if retainer.created_by else "") + " " + (
                                          retainer.created_by.employee.last_name if retainer.created_by else "")
                    elif retainer.created_by.company:
                        received_by = retainer.created_by.company.title if retainer.created_by else ""
                    else:
                        received_by = ""
                else:
                    received_by = ""
                retainer_dictionary['received_by'] = received_by
                retainer_dictionary['amount'] = retainer.net_amount if retainer.net_amount else 0
                retainer_dictionary['payment_method'] = retainer.payment_method
                retainer_dictionary['retainer'] = retainer.id
                retainer_dictionary['retainer_type'] = retainer.retainer_type
                financial = FinancialResponsible.objects.filter(
                    price_quote_contract__id=retainer.client_contract.id).last()
                name = financial.client.name
                contract = retainer.client_contract.client_contract_id
                client_ = ClientCaseContract.objects.filter(
                    contract__id=retainer.client_contract.id).last()
                if client_:
                    client_id = client_.client.client_id
                elif retainer.client_contract.client:
                    client_id = retainer.client_contract.client.client_id
                else:
                    client_id = ''
                retainer_dictionary['name'] = name if name else ""
                retainer_dictionary['contract_id'] = contract if contract else ""
                retainer_dictionary['client_id'] = client_id if client_id else ""
                attorney_fee.append(retainer_dictionary)
            # contract = ClientReservationContract.objects.filter(is_retainer=True, is_initial_payment=True,
            #                                                     office__id=user.office.id,
            #                                                     created_at__date=date).order_by('-id')
            # for contract_amount in contract:
            #     contract_dictionary = dict()
            #     contract_dictionary['created_at'] = contract_amount.created_at
            #     if contract_amount.created_by:
            #         if contract_amount.created_by.employee:
            #             received_by = (
            #                               contract_amount.created_by.employee.first_name if contract_amount.created_by else "") + " " + (
            #                               contract_amount.created_by.employee.last_name if contract_amount.created_by else "")
            #         elif contract_amount.created_by.company:
            #             received_by = contract_amount.created_by.company.title if contract_amount.created_by else ""
            #         else:
            #             received_by = ""
            #     else:
            #         received_by = ""
            #     contract_dictionary['received_by'] = received_by
            #     price_quote = PriceQuote.objects.filter(id=contract_amount.price_quote.id).last()
            #     service_request = PriceQuoteServiceRequest.objects.filter(price_quote__id=price_quote.id)
            #     retainer_amount = 0
            #     for obj in service_request:
            #         retainer_amount += obj.retainer_amount
            #     current_balance = retainer_amount if retainer_amount else 0
            #     contract_dictionary[
            #         'amount'] = current_balance if current_balance else 0
            #     financial = FinancialResponsible.objects.filter(
            #         price_quote_contract__id=contract_amount.id).last()
            #     name = financial.client.name
            #     contract_dictionary['name'] = name if name else ""
            #     contract = contract_amount.client_contract_id
            #     client_ = ClientCaseContract.objects.filter(
            #         contract__id=contract_amount.id).last()
            #     if client_:
            #         client_id = client_.client.client_id
            #     elif contract_amount.client:
            #         client_id = contract_amount.client.client_id
            #     else:
            #         client_id = ''
            #     contract_dictionary['contract_id'] = contract if contract else ""
            #     contract_dictionary['client_id'] = client_id if client_id else ""
            #     contract_dictionary['payment_method'] = contract_amount.payment_method
            #     attorney_fee.append(contract_dictionary)
            # charge from client
            charge_fee = list()
            retainer_charge_amount = BillingRetainerHistory.objects.filter(office__id=user.office.id,
                                                                           retainer_type__in=[0, 1],
                                                                           date=date).order_by('-id')
            for charge_amount in retainer_charge_amount:
                retainer_charge_dictionary = dict()
                retainer_charge_dictionary['created_at'] = charge_amount.date if charge_amount.date else None
                if charge_amount.created_by:
                    if charge_amount.created_by.employee:
                        received_by = (
                                          charge_amount.created_by.employee.first_name if charge_amount.created_by else "") + " " + (
                                          charge_amount.created_by.employee.last_name if charge_amount.created_by else "")
                    elif charge_amount.created_by.company:
                        received_by = charge_amount.created_by.company.title if charge_amount.created_by else ""
                    else:
                        received_by = ""
                else:
                    received_by = ""
                retainer_charge_dictionary['received_by'] = received_by
                retainer_charge_dictionary['amount'] = charge_amount.net_amount if charge_amount.net_amount else 0
                retainer_charge_dictionary['payment_method'] = charge_amount.payment_method
                retainer_charge_dictionary['retainer'] = charge_amount.id
                if charge_amount.staff:
                    staff_name = (
                                     charge_amount.staff.first_name if charge_amount.staff else "") + " " + (
                                     charge_amount.staff.last_name if charge_amount.staff else "")
                else:
                    staff_name = ''
                retainer_charge_dictionary['staff_name'] = staff_name
                retainer_charge_dictionary['time'] = charge_amount.time
                retainer_charge_dictionary['retainer_type'] = charge_amount.retainer_type
                financial = FinancialResponsible.objects.filter(
                    price_quote_contract__id=charge_amount.client_contract.id).last()
                name = financial.client.name
                contract = charge_amount.client_contract.client_contract_id
                client_ = ClientCaseContract.objects.filter(
                    contract__id=charge_amount.client_contract.id).last()
                if client_:
                    client_id = client_.client.client_id
                elif charge_amount.client_contract.client:
                    client_id = charge_amount.client_contract.client.client_id
                else:
                    client_id = ''
                retainer_charge_dictionary['name'] = name if name else ""
                retainer_charge_dictionary['contract_id'] = contract if contract else ""
                retainer_charge_dictionary['client_id'] = client_id if client_id else ""
                charge_fee.append(retainer_charge_dictionary)
            # cancelled by client
            cancelled_fee = list()
            retainer_cancelled_amount = BillingRetainerHistory.objects.filter(office__id=user.office.id,
                                                                              retainer_type__in=[3, 5],
                                                                              date=date).order_by('-id')
            for cancelled_amount in retainer_cancelled_amount:
                retainer_cancelled_dictionary = dict()
                retainer_cancelled_dictionary['created_at'] = cancelled_amount.date if cancelled_amount.date else None
                if cancelled_amount.created_by:
                    if cancelled_amount.created_by.employee:
                        received_by = (
                                          cancelled_amount.created_by.employee.first_name if cancelled_amount.created_by else "") + " " + (
                                          cancelled_amount.created_by.employee.last_name if cancelled_amount.created_by else "")
                    elif cancelled_amount.created_by.company:
                        received_by = cancelled_amount.created_by.company.title if cancelled_amount.created_by else ""
                    else:
                        received_by = ""
                else:
                    received_by = ""
                if cancelled_amount.cancelled_by:
                    if cancelled_amount.cancelled_by.employee:
                        cancelled_by = (
                                           cancelled_amount.cancelled_by.employee.first_name if cancelled_amount.cancelled_by else "") + " " + (
                                           cancelled_amount.cancelled_by.employee.last_name if cancelled_amount.cancelled_by else "")
                    elif cancelled_amount.cancelled_by.company:
                        cancelled_by = cancelled_amount.cancelled_by.company.title if cancelled_amount.cancelled_by else ""
                    else:
                        cancelled_by = ""
                else:
                    cancelled_by = ""
                retainer_cancelled_dictionary['received_by'] = received_by
                retainer_cancelled_dictionary['cancelled_by'] = cancelled_by
                retainer_cancelled_dictionary[
                    'amount'] = cancelled_amount.net_amount if cancelled_amount.net_amount else 0
                retainer_cancelled_dictionary['payment_method'] = cancelled_amount.payment_method
                if cancelled_amount.staff:
                    staff_name = (
                                     cancelled_amount.staff.first_name if cancelled_amount.staff else "") + " " + (
                                     cancelled_amount.staff.last_name if cancelled_amount.staff else "")
                else:
                    staff_name = ''
                retainer_cancelled_dictionary['staff_name'] = staff_name
                retainer_cancelled_dictionary['time'] = cancelled_amount.time
                retainer_cancelled_dictionary[
                    'time_in_hours'] = cancelled_amount.time_in_hours if cancelled_amount.time_in_hours else 0
                retainer_cancelled_dictionary['retainer'] = cancelled_amount.id
                retainer_cancelled_dictionary['retainer_type'] = cancelled_amount.retainer_type
                financial = FinancialResponsible.objects.filter(
                    price_quote_contract__id=cancelled_amount.client_contract.id).last()
                name = financial.client.name
                contract = cancelled_amount.client_contract.client_contract_id
                client_ = ClientCaseContract.objects.filter(
                    contract__id=cancelled_amount.client_contract.id).last()
                if client_:
                    client_id = client_.client.client_id
                elif cancelled_amount.client_contract.client:
                    client_id = cancelled_amount.client_contract.client.client_id
                else:
                    client_id = ''
                retainer_cancelled_dictionary['name'] = name if name else ""
                retainer_cancelled_dictionary['contract_id'] = contract if contract else ""
                retainer_cancelled_dictionary['client_id'] = client_id if client_id else ""
                cancelled_fee.append(retainer_cancelled_dictionary)
            # charge from client
            charge_fee = list()
            retainer_charge_amount = BillingRetainerHistory.objects.filter(office__id=user.office.id,
                                                                           retainer_type__in=[0, 1],
                                                                           date=date).order_by('-id')
            for charge_amount in retainer_charge_amount:
                retainer_charge_dictionary = dict()
                retainer_charge_dictionary['created_at'] = charge_amount.date if charge_amount.date else None
                if charge_amount.created_by:
                    if charge_amount.created_by.employee:
                        received_by = (
                                          charge_amount.created_by.employee.first_name if charge_amount.created_by else "") + " " + (
                                          charge_amount.created_by.employee.last_name if charge_amount.created_by else "")
                    elif charge_amount.created_by.company:
                        received_by = charge_amount.created_by.company.title if charge_amount.created_by else ""
                    else:
                        received_by = ""
                else:
                    received_by = ""
                retainer_charge_dictionary['received_by'] = received_by
                retainer_charge_dictionary['amount'] = charge_amount.net_amount if charge_amount.net_amount else 0
                retainer_charge_dictionary['payment_method'] = charge_amount.payment_method
                retainer_charge_dictionary['retainer'] = charge_amount.id
                if charge_amount.staff:
                    staff_name = (
                                     charge_amount.staff.first_name if charge_amount.staff else "") + " " + (
                                     charge_amount.staff.last_name if charge_amount.staff else "")
                else:
                    staff_name = ''
                retainer_charge_dictionary['staff_name'] = staff_name
                retainer_charge_dictionary['time'] = charge_amount.time
                retainer_charge_dictionary[
                    'time_in_hours'] = charge_amount.time_in_hours if charge_amount.time_in_hours else 0
                retainer_charge_dictionary['retainer_type'] = charge_amount.retainer_type
                financial = FinancialResponsible.objects.filter(
                    price_quote_contract__id=charge_amount.client_contract.id).last()
                name = financial.client.name
                contract = charge_amount.client_contract.client_contract_id
                client_ = ClientCaseContract.objects.filter(
                    contract__id=charge_amount.client_contract.id).last()
                if client_:
                    client_id = client_.client.client_id
                elif charge_amount.client_contract.client:
                    client_id = charge_amount.client_contract.client.client_id
                else:
                    client_id = ''
                retainer_charge_dictionary['name'] = name if name else ""
                retainer_charge_dictionary['contract_id'] = contract if contract else ""
                retainer_charge_dictionary['client_id'] = client_id if client_id else ""
                charge_fee.append(retainer_charge_dictionary)
            # refund by client
            refund_amount = list()
            retainer_refund_amount = BillingRetainerHistory.objects.filter(office__id=user.office.id,
                                                                           retainer_type=8,
                                                                           date=date).order_by('-id')
            for refund_fee in retainer_refund_amount:
                retainer_refund_dictionary = dict()
                retainer_refund_dictionary['created_at'] = refund_fee.date if refund_fee.date else None
                if refund_fee.created_by:
                    if refund_fee.created_by.employee:
                        received_by = (
                                          refund_fee.created_by.employee.first_name if refund_fee.created_by else "") + " " + (
                                          refund_fee.created_by.employee.last_name if refund_fee.created_by else "")
                    elif refund_fee.created_by.company:
                        received_by = refund_fee.created_by.company.title if refund_fee.created_by else ""
                    else:
                        received_by = ""
                else:
                    received_by = ""
                retainer_refund_dictionary['received_by'] = received_by
                retainer_refund_dictionary[
                    'amount'] = ((refund_fee.net_amount if refund_fee.net_amount else 0) +
                                 (refund_fee.refund_charges if refund_fee.refund_charges else 0))
                retainer_refund_dictionary['payment_method'] = refund_fee.payment_method
                if refund_fee.staff:
                    staff_name = (
                                     refund_fee.staff.first_name if refund_fee.staff else "") + " " + (
                                     refund_fee.staff.last_name if refund_fee.staff else "")
                else:
                    staff_name = ''
                retainer_refund_dictionary['staff_name'] = staff_name
                retainer_refund_dictionary['time'] = refund_fee.time
                retainer_refund_dictionary['retainer'] = refund_fee.id
                retainer_refund_dictionary['retainer_type'] = refund_fee.retainer_type
                financial = FinancialResponsible.objects.filter(
                    price_quote_contract__id=refund_fee.client_contract.id).last()
                name = financial.client.name
                contract = refund_fee.client_contract.client_contract_id
                client_ = ClientCaseContract.objects.filter(
                    contract__id=refund_fee.client_contract.id).last()
                if client_:
                    client_id = client_.client.client_id
                elif refund_fee.client_contract.client:
                    client_id = refund_fee.client_contract.client.client_id
                else:
                    client_id = ''
                retainer_refund_dictionary['name'] = name if name else ""
                retainer_refund_dictionary['contract_id'] = contract if contract else ""
                retainer_refund_dictionary['client_id'] = client_id if client_id else ""
                refund_amount.append(retainer_refund_dictionary)
            # discount by client
            discount_amounts = list()
            retainer_discount_amount = BillingRetainerHistory.objects.filter(office__id=user.office.id,
                                                                             retainer_type=7,
                                                                             date=date).order_by(
                '-id')
            for discount_amount in retainer_discount_amount:
                retainer_discount_dictionary = dict()
                retainer_discount_dictionary['created_at'] = discount_amount.date if discount_amount.date else None
                if discount_amount.created_by:
                    if discount_amount.created_by.employee:
                        received_by = (
                                          discount_amount.created_by.employee.first_name if discount_amount.created_by else "") + " " + (
                                          discount_amount.created_by.employee.last_name if discount_amount.created_by else "")
                    elif discount_amount.created_by.company:
                        received_by = discount_amount.created_by.company.title if discount_amount.created_by else ""
                    else:
                        received_by = ""
                else:
                    received_by = ""
                retainer_discount_dictionary['received_by'] = received_by
                retainer_discount_dictionary[
                    'amount'] = discount_amount.net_amount if discount_amount.net_amount else 0
                retainer_discount_dictionary['payment_method'] = discount_amount.payment_method
                if discount_amount.staff:
                    staff_name = (
                                     discount_amount.staff.first_name if discount_amount.staff else "") + " " + (
                                     discount_amount.staff.last_name if discount_amount.staff else "")
                else:
                    staff_name = ''
                retainer_discount_dictionary['staff_name'] = staff_name
                retainer_discount_dictionary['time'] = discount_amount.time
                retainer_discount_dictionary['retainer'] = discount_amount.id
                retainer_discount_dictionary['retainer_type'] = discount_amount.retainer_type
                financial = FinancialResponsible.objects.filter(
                    price_quote_contract__id=discount_amount.client_contract.id).last()
                name = financial.client.name
                contract = discount_amount.client_contract.client_contract_id
                client_ = ClientCaseContract.objects.filter(
                    contract__id=discount_amount.client_contract.id).last()
                if client_:
                    client_id = client_.client.client_id
                elif discount_amount.client_contract.client:
                    client_id = discount_amount.client_contract.client.client_id
                else:
                    client_id = ''
                retainer_discount_dictionary['name'] = name if name else ""
                retainer_discount_dictionary['contract_id'] = contract if contract else ""
                retainer_discount_dictionary['client_id'] = client_id if client_id else ""
                discount_amounts.append(retainer_discount_dictionary)
            # service charges list
            service_charges_fee = list()
            charges_summary = BillingRetainerHistory.objects.filter(service_charges__gt=0,
                                                                    date=date).order_by('-id')
            for service in charges_summary:
                service_dictionary = dict()
                service_dictionary['created_at'] = service.date if service.date else None
                if service.created_by:
                    if service.created_by.employee:
                        received_by = (
                                          service.created_by.employee.first_name if service.created_by else "") + " " + (
                                          service.created_by.employee.last_name if service.created_by else "")
                    elif service.created_by.company:
                        received_by = service.created_by.company.title if service.created_by else ""
                    else:
                        received_by = ""
                else:
                    received_by = ""
                service_dictionary['received_by'] = received_by
                service_dictionary[
                    'amount'] = service.net_amount if service.net_amount else 0
                service_dictionary['service_charges'] = service.service_charges if service.service_charges else 0
                service_dictionary['payment_method'] = service.payment_method
                if service.staff:
                    staff_name = (
                                     service.staff.first_name if service.staff else "") + " " + (
                                     service.staff.last_name if service.staff else "")
                else:
                    staff_name = ''
                service_dictionary['staff_name'] = staff_name
                service_dictionary['time'] = service.time
                service_dictionary['retainer'] = service.id
                service_dictionary['retainer_type'] = service.retainer_type
                financial = FinancialResponsible.objects.filter(
                    price_quote_contract__id=service.client_contract.id).last()
                name = financial.client.name
                contract = service.client_contract.client_contract_id
                client_ = ClientCaseContract.objects.filter(
                    contract__id=service.client_contract.id).last()
                if client_:
                    client_id = client_.client.client_id
                elif service.client_contract.client:
                    client_id = service.client_contract.client.client_id
                else:
                    client_id = ''
                service_dictionary['name'] = name if name else ""
                service_dictionary['contract_id'] = contract if contract else ""
                service_dictionary['client_id'] = client_id if client_id else ""
                service_charges_fee.append(service_dictionary)
            # adjustment by client
            adjustment_amount = list()
            retainer_adjustment_amount = BillingRetainerHistory.objects.filter(office__id=user.office.id,
                                                                               retainer_type__in=[9, 11],
                                                                               date=date).order_by(
                '-id')
            for adjustment_fee in retainer_adjustment_amount:
                retainer_adjustment_dictionary = dict()
                retainer_adjustment_dictionary['created_at'] = adjustment_fee.date if adjustment_fee.date else None
                if adjustment_fee.created_by:
                    if adjustment_fee.created_by.employee:
                        received_by = (
                                          adjustment_fee.created_by.employee.first_name if adjustment_fee.created_by else "") + " " + (
                                          adjustment_fee.created_by.employee.last_name if adjustment_fee.created_by else "")
                    elif adjustment_fee.created_by.company:
                        received_by = adjustment_fee.created_by.company.title if adjustment_fee.created_by else ""
                    else:
                        received_by = ""
                else:
                    received_by = ""
                retainer_adjustment_dictionary['received_by'] = received_by
                retainer_adjustment_dictionary[
                    'amount'] = adjustment_fee.net_amount if adjustment_fee.net_amount else 0
                retainer_adjustment_dictionary['payment_method'] = adjustment_fee.payment_method
                if adjustment_fee.staff:
                    staff_name = (
                                     adjustment_fee.staff.first_name if adjustment_fee.staff else "") + " " + (
                                     adjustment_fee.staff.last_name if adjustment_fee.staff else "")
                else:
                    staff_name = ''
                retainer_adjustment_dictionary['staff_name'] = staff_name
                retainer_adjustment_dictionary['time'] = adjustment_fee.time
                retainer_adjustment_dictionary['retainer'] = adjustment_fee.id
                retainer_adjustment_dictionary['retainer_type'] = adjustment_fee.retainer_type
                financial = FinancialResponsible.objects.filter(
                    price_quote_contract__id=adjustment_fee.client_contract.id).last()
                name = financial.client.name
                contract = adjustment_fee.client_contract.client_contract_id
                client_ = ClientCaseContract.objects.filter(
                    contract__id=adjustment_fee.client_contract.id).last()
                if client_:
                    client_id = client_.client.client_id
                elif adjustment_fee.client_contract.client:
                    client_id = adjustment_fee.client_contract.client.client_id
                else:
                    client_id = ''
                retainer_adjustment_dictionary['name'] = name if name else ""
                retainer_adjustment_dictionary['contract_id'] = contract if contract else ""
                retainer_adjustment_dictionary['client_id'] = client_id if client_id else ""
                adjustment_amount.append(retainer_adjustment_dictionary)
            sorted_data = sorted(attorney_fee, key=lambda x: x['created_at'], reverse=True)
            service_time = list()
            retainer_service_time = BillingRetainerHistory.objects.filter(office__id=user.office.id,
                                                                          retainer_type=0,
                                                                          date=date)
            retainer_employees_service_time = list(
                retainer_service_time.filter(staff__isnull=False).values_list('staff_id', flat=True))
            employees_service = set(retainer_employees_service_time)
            for service_ in employees_service:
                employee_dict = dict()
                employee_time = retainer_service_time.filter(retainer_type=0,
                                                             staff__id=service_)
                employee_profile = EmployeesProfile.objects.filter(id=service_).last()
                employee_dict['employee_name'] = employee_profile.first_name + ' ' + employee_profile.last_name
                employee_dict['total_tme'] = employee_time.aggregate(Sum('time'))['time__sum']
                employee_dict['total_tme_in_hours'] = employee_time.aggregate(Sum('time_in_hours'))[
                    'time_in_hours__sum']
                service_time.append(employee_dict)
            summary_dict = dict()
            summary_dict['client_payments'] = sorted_data
            summary_dict['client_discount'] = discount_amounts
            summary_dict['service_charges'] = service_charges_fee
            summary_dict['client_refund'] = refund_amount
            summary_dict['client_adjustment'] = adjustment_amount
            summary_dict['charge_by_client'] = charge_fee
            summary_dict['cancelled_by_client'] = cancelled_fee
            summary_dict['employee_total_work_time'] = service_time
            return Response(summary_dict, status=status.HTTP_200_OK)

        except Exception as e:
            return Response({ERROR: REST_ERR_GENERIC, MESSAGE: str(e)}, status=status.HTTP_400_BAD_REQUEST)


# payment received log summary
class PaymentReceivedByLogSummaryViewSet(mixins.ListModelMixin,
                                         GenericViewSet):
    authentication_classes = (CompanyUserAuthentication,)

    def list(self, request, *args, **kwargs):
        try:
            auth_token = request.META['HTTP_AUTHORIZATION']
            if CompanySessions.objects.filter(auth_token__exact=auth_token,
                                              is_active=True).exists():
                user = CompanySessions.objects.filter(auth_token__exact=auth_token,
                                                      is_active=True).last().user
                date = request.GET.get('date')
                billing_summary = BillingInstallmentPaidSummary.objects.filter(Q(payment_toward_principle__gt=0) |
                                                                               Q(payment_toward_fine__gt=0),
                                                                               created_at__date=date,
                                                                               payment_method__in=[1, 2, 3, 5, 6, 7, 9,
                                                                                                   10, 12],
                                                                               installment__office__id=user.office.id)
                fix_employees = list(
                    billing_summary.filter(received_by__employee__isnull=False).values_list('received_by__employee_id',
                                                                                            flat=True))
                fix_company = list(
                    billing_summary.filter(received_by__employee__isnull=True).values_list('received_by__company_id',
                                                                                           flat=True))

                # reservation logs
                reservation = ReservationConsalatation.objects.filter(office__id=user.office.id, payment_status=1,
                                                                      payment_date__date=date)
                reservation_employees = list(reservation.filter(created_by__employee__isnull=False).values_list(
                    'created_by__employee_id', flat=True))
                reservation_company = list(reservation.filter(created_by__employee__isnull=True).values_list(
                    'created_by__company_id', flat=True))

                # mis payment
                mis_billing_summary = MiscellaneousFee.objects.filter(office__id=user.office.id, created_at__date=date,
                                                                      type='miscellaneous',
                                                                      status__in=[3, 5, 6, 7, 8])
                mis_employees = list(mis_billing_summary.filter(created_by__employee__isnull=False).values_list(
                    'created_by__employee_id', flat=True))
                mis_company = list(mis_billing_summary.filter(created_by__employee__isnull=True).values_list(
                    'created_by__company_id', flat=True))

                # gov payment
                gov_billing_summary = MiscellaneousFee.objects.filter(office__id=user.office.id, created_at__date=date,
                                                                      type='government_fee',
                                                                      status__in=[3, 5, 6, 7, 8])
                gov_employees = list(gov_billing_summary.filter(created_by__employee__isnull=False).values_list(
                    'created_by__employee_id', flat=True))
                gov_company = list(gov_billing_summary.filter(created_by__employee__isnull=True).values_list(
                    'created_by__company_id', flat=True))

                # contract = ClientReservationContract.objects.filter(is_retainer=True, is_initial_payment=True,
                #                                                     office__id=user.office.id,
                #                                                     created_at__date=date)
                # contract_employees = list(contract.filter(created_by__employee__isnull=False).values_list(
                #     'created_by__employee_id', flat=True))
                # contract_company = list(contract.filter(created_by__employee__isnull=True).values_list(
                #     'created_by__company_id', flat=True))

                retainer_charge_amount = BillingRetainerHistory.objects.filter(office__id=user.office.id,
                                                                               retainer_type__in=[2, 7, 8, 9, 11],
                                                                               date=date)
                retainer_employees = list(retainer_charge_amount.filter(created_by__employee__isnull=False).values_list(
                    'created_by__employee_id', flat=True))
                retainer_company = list(retainer_charge_amount.filter(created_by__employee__isnull=True).values_list(
                    'created_by__company_id', flat=True))
                company = set(
                    fix_company + retainer_company + reservation_company + mis_company + gov_company)
                employees = set(
                    fix_employees + retainer_employees + reservation_employees + mis_employees + gov_employees)
                # contract_list.append(retainer_charge_amount)
                contract_list = list()
                for emp in employees:
                    emp_dictionary = dict()
                    employee_profile = EmployeesProfile.objects.filter(id=emp).last()
                    emp_dictionary['received_by'] = employee_profile.first_name + ' ' + employee_profile.last_name
                    # payment through credit card
                    credit_attorney_payment = \
                        billing_summary.filter(payment_method=1, received_by__employee__id=emp).aggregate(
                            Sum('payment_toward_principle'))['payment_toward_principle__sum']
                    credit_attorney_service_charge = \
                        billing_summary.filter(payment_method=1, received_by__employee__id=emp).aggregate(
                            Sum('attorney_service_charges'))['attorney_service_charges__sum']
                    credit_fine_payment = \
                        billing_summary.filter(payment_method=1, received_by__employee__id=emp).aggregate(
                            Sum('payment_toward_fine'))['payment_toward_fine__sum']
                    credit_fine_service_charge = \
                        billing_summary.filter(payment_method=1, received_by__employee__id=emp).aggregate(
                            Sum('fine_service_charges'))['fine_service_charges__sum']
                    retainer_credit_payment = retainer_charge_amount.filter(payment_method=1, retainer_type=2,
                                                                            created_by__employee__id=emp).aggregate(
                        Sum('net_amount'))['net_amount__sum']
                    reservation_credit_payment = \
                        reservation.filter(created_by__employee__id=emp, payment_method=1).aggregate(
                            Sum('total_premium_price'))['total_premium_price__sum']
                    mis_credit_payment = \
                        mis_billing_summary.filter(created_by__employee__id=emp, status=5, payment_method=1).aggregate(
                            Sum('amount'))['amount__sum']
                    gov_credit_payment = \
                        gov_billing_summary.filter(created_by__employee__id=emp, status=5, payment_method=1).aggregate(
                            Sum('amount'))['amount__sum']
                    mis_credit_service_charge = \
                        mis_billing_summary.filter(created_by__employee__id=emp, status=5, payment_method=1).aggregate(
                            Sum('mis_service_charges'))['mis_service_charges__sum']
                    gov_credit_service_charge = \
                        gov_billing_summary.filter(created_by__employee__id=emp, status=5, payment_method=1).aggregate(
                            Sum('gov_service_charges'))['gov_service_charges__sum']
                    # contract_credit_payment = \
                    # contract.filter(created_by__employee__id=emp, payment_method=1).aggregate(Sum('retainer_amount'))[
                    #     'retainer_amount__sum']
                    emp_dictionary['credit_payment'] = ((credit_attorney_payment if credit_attorney_payment else 0) +
                                                        (credit_fine_payment if credit_fine_payment else 0) +
                                                        (retainer_credit_payment if retainer_credit_payment else 0) +
                                                        (
                                                            reservation_credit_payment if reservation_credit_payment else 0) +
                                                        (mis_credit_payment if mis_credit_payment else 0) +
                                                        (gov_credit_payment if gov_credit_payment else 0) +
                                                        (
                                                            credit_attorney_service_charge if credit_attorney_service_charge else 0)
                                                        + (
                                                            credit_fine_service_charge if credit_fine_service_charge else 0)
                                                        + (
                                                            mis_credit_service_charge if mis_credit_service_charge else 0)
                                                        + (
                                                            gov_credit_service_charge if gov_credit_service_charge else 0))
                    # payment through check
                    check_attorney_payment = \
                        billing_summary.filter(payment_method=2, received_by__employee__id=emp).aggregate(
                            Sum('payment_toward_principle'))['payment_toward_principle__sum']
                    check_fine_payment = \
                        billing_summary.filter(payment_method=2, received_by__employee__id=emp).aggregate(
                            Sum('payment_toward_fine'))['payment_toward_fine__sum']
                    check_attorney_service_charge = \
                        billing_summary.filter(payment_method=2, received_by__employee__id=emp).aggregate(
                            Sum('attorney_service_charges'))['attorney_service_charges__sum']
                    check_fine_service_charge = \
                        billing_summary.filter(payment_method=2, received_by__employee__id=emp).aggregate(
                            Sum('fine_service_charges'))['fine_service_charges__sum']
                    retainer_check_payment = retainer_charge_amount.filter(payment_method=2, retainer_type=2,
                                                                           created_by__employee__id=emp).aggregate(
                        Sum('net_amount'))['net_amount__sum']
                    mis_check_payment = \
                        mis_billing_summary.filter(created_by__employee__id=emp, status=5, payment_method=2).aggregate(
                            Sum('amount'))['amount__sum']
                    gov_check_payment = \
                        gov_billing_summary.filter(created_by__employee__id=emp, status=5, payment_method=2).aggregate(
                            Sum('amount'))['amount__sum']
                    mis_check_service_charge = \
                        mis_billing_summary.filter(created_by__employee__id=emp, status=5, payment_method=2).aggregate(
                            Sum('mis_service_charges'))['mis_service_charges__sum']
                    gov_check_service_charge = \
                        gov_billing_summary.filter(created_by__employee__id=emp, status=5, payment_method=2).aggregate(
                            Sum('gov_service_charges'))['gov_service_charges__sum']
                    # contract_check_payment = \
                    # contract.filter(created_by__employee__id=emp, payment_method=2).aggregate(Sum('retainer_amount'))[
                    #     'retainer_amount__sum']
                    reservation_check_payment = \
                        reservation.filter(created_by__employee__id=emp, payment_method=2).aggregate(
                            Sum('total_premium_price'))['total_premium_price__sum']
                    emp_dictionary['check_payment'] = ((check_attorney_payment if check_attorney_payment else 0) +
                                                       (check_fine_payment if check_fine_payment else 0) +
                                                       (retainer_check_payment if retainer_check_payment else 0) +
                                                       (mis_check_payment if mis_check_payment else 0) +
                                                       (reservation_check_payment if reservation_check_payment else 0) +
                                                       (gov_check_payment if gov_check_payment else 0) +
                                                       (
                                                           check_attorney_service_charge if check_attorney_service_charge else 0)
                                                       + (check_fine_service_charge if check_fine_service_charge else 0)
                                                       + (mis_check_service_charge if mis_check_service_charge else 0)
                                                       + (gov_check_service_charge if gov_check_service_charge else 0))
                    # payment through cash
                    cash_attorney_payment = \
                        billing_summary.filter(payment_method=3, received_by__employee__id=emp).aggregate(
                            Sum('payment_toward_principle'))['payment_toward_principle__sum']
                    cash_fine_payment = \
                        billing_summary.filter(payment_method=3, received_by__employee__id=emp).aggregate(
                            Sum('payment_toward_fine'))['payment_toward_fine__sum']
                    cash_attorney_service_charge = \
                        billing_summary.filter(payment_method=3, received_by__employee__id=emp).aggregate(
                            Sum('attorney_service_charges'))['attorney_service_charges__sum']
                    cash_fine_service_charge = \
                        billing_summary.filter(payment_method=3, received_by__employee__id=emp).aggregate(
                            Sum('fine_service_charges'))['fine_service_charges__sum']
                    retainer_cash_payment = retainer_charge_amount.filter(payment_method=3, retainer_type=2,
                                                                          created_by__employee__id=emp).aggregate(
                        Sum('net_amount'))['net_amount__sum']
                    reservation_cash_payment = \
                        reservation.filter(created_by__employee__id=emp, payment_method=3).aggregate(
                            Sum('total_premium_price'))['total_premium_price__sum']
                    mis_cash_payment = \
                        mis_billing_summary.filter(created_by__employee__id=emp, status=5, payment_method=3).aggregate(
                            Sum('amount'))['amount__sum']
                    gov_cash_payment = \
                        gov_billing_summary.filter(created_by__employee__id=emp, status=5, payment_method=3).aggregate(
                            Sum('amount'))['amount__sum']
                    mis_cash_service_charge = \
                        mis_billing_summary.filter(created_by__employee__id=emp, status=5, payment_method=3).aggregate(
                            Sum('mis_service_charges'))['mis_service_charges__sum']
                    gov_cash_service_charge = \
                        gov_billing_summary.filter(created_by__employee__id=emp, status=5, payment_method=3).aggregate(
                            Sum('gov_service_charges'))['gov_service_charges__sum']
                    # contract_cash_payment = \
                    # contract.filter(created_by__employee__id=emp, payment_method=3).aggregate(Sum('retainer_amount'))[
                    #     'retainer_amount__sum']
                    emp_dictionary['cash_payment'] = ((cash_attorney_payment if cash_attorney_payment else 0) +
                                                      (cash_fine_payment if cash_fine_payment else 0) +
                                                      (retainer_cash_payment if retainer_cash_payment else 0) +
                                                      (reservation_cash_payment if reservation_cash_payment else 0) +
                                                      (mis_cash_payment if mis_cash_payment else 0) +
                                                      (gov_cash_payment if gov_cash_payment else 0) +
                                                      (
                                                          cash_attorney_service_charge if cash_attorney_service_charge else 0)
                                                      + (cash_fine_service_charge if cash_fine_service_charge else 0) +
                                                      (mis_cash_service_charge if mis_cash_service_charge else 0) +
                                                      (gov_cash_service_charge if gov_cash_service_charge else 0))
                    # payment in direct account
                    account_attorney_payment = \
                        billing_summary.filter(payment_method=5, received_by__employee__id=emp).aggregate(
                            Sum('payment_toward_principle'))['payment_toward_principle__sum']
                    account_fine_payment = \
                        billing_summary.filter(payment_method=5, received_by__employee__id=emp).aggregate(
                            Sum('payment_toward_fine'))['payment_toward_fine__sum']
                    account_attorney_service_charge = \
                        billing_summary.filter(payment_method=5, received_by__employee__id=emp).aggregate(
                            Sum('attorney_service_charges'))['attorney_service_charges__sum']
                    account_fine_service_charge = \
                        billing_summary.filter(payment_method=5, received_by__employee__id=emp).aggregate(
                            Sum('fine_service_charges'))['fine_service_charges__sum']
                    retainer_account_payment = retainer_charge_amount.filter(payment_method=5, retainer_type=2,
                                                                             created_by__employee__id=emp).aggregate(
                        Sum('net_amount'))['net_amount__sum']
                    mis_account_payment = \
                        mis_billing_summary.filter(created_by__employee__id=emp, status=5, payment_method=5).aggregate(
                            Sum('amount'))['amount__sum']
                    gov_account_payment = \
                        gov_billing_summary.filter(created_by__employee__id=emp, status=5, payment_method=5).aggregate(
                            Sum('amount'))['amount__sum']
                    mis_account_service_charge = \
                        mis_billing_summary.filter(created_by__employee__id=emp, status=5, payment_method=5).aggregate(
                            Sum('mis_service_charges'))['mis_service_charges__sum']
                    gov_account_service_charge = \
                        gov_billing_summary.filter(created_by__employee__id=emp, status=5, payment_method=5).aggregate(
                            Sum('gov_service_charges'))['gov_service_charges__sum']
                    # contract_account_payment = \
                    # contract.filter(created_by__employee__id=emp, payment_method=5).aggregate(Sum('retainer_amount'))[
                    #     'retainer_amount__sum']
                    reservation_account_payment = \
                        reservation.filter(created_by__employee__id=emp, payment_method=5).aggregate(
                            Sum('total_premium_price'))['total_premium_price__sum']
                    emp_dictionary['direct_account_payment'] = (
                            (account_attorney_payment if account_attorney_payment else 0) +
                            (account_fine_payment if account_fine_payment else 0) +
                            (retainer_account_payment if retainer_account_payment else 0) +
                            (mis_account_payment if mis_account_payment else 0) +
                            (reservation_account_payment if reservation_account_payment else 0) +
                            (gov_account_payment if gov_account_payment else 0) +
                            (account_attorney_service_charge if account_attorney_service_charge else 0)
                            + (account_fine_service_charge if account_fine_service_charge else 0) +
                            (mis_account_service_charge if mis_account_service_charge else 0) +
                            (gov_account_service_charge if gov_account_service_charge else 0))

                    # refund amount
                    refund_attorney_payment = \
                        billing_summary.filter(payment_method=10, received_by__employee__id=emp).aggregate(
                            Sum('payment_toward_principle'))['payment_toward_principle__sum']
                    refund_fine_payment = \
                        billing_summary.filter(payment_method=10, received_by__employee__id=emp).aggregate(
                            Sum('payment_toward_fine'))['payment_toward_fine__sum']
                    retainer_refund = retainer_charge_amount.filter(retainer_type=8,
                                                                    created_by__employee__id=emp).aggregate(
                        Sum('net_amount'))['net_amount__sum']
                    retainer_refund_charges = retainer_charge_amount.filter(retainer_type=8,
                                                                            created_by__employee__id=emp).aggregate(
                        Sum('refund_charges'))['refund_charges__sum']
                    retainer_refund_payment = ((retainer_refund if retainer_refund else 0) +
                                               (retainer_refund_charges if retainer_refund_charges else 0))
                    mis_refund_payment = \
                        mis_billing_summary.filter(created_by__employee__id=emp, status=3).aggregate(Sum('amount'))[
                            'amount__sum']
                    gov_refund_payment = \
                        gov_billing_summary.filter(created_by__employee__id=emp, status=3).aggregate(Sum('amount'))[
                            'amount__sum']
                    emp_dictionary['refund_payment'] = ((refund_attorney_payment if refund_attorney_payment else 0) +
                                                        (refund_fine_payment if refund_fine_payment else 0) +
                                                        (retainer_refund_payment if retainer_refund_payment else 0) +
                                                        (mis_refund_payment if mis_refund_payment else 0) +
                                                        (gov_refund_payment if gov_refund_payment else 0))

                    # adjustment amount
                    adjustment_attorney_payments = \
                        billing_summary.filter(payment_method=9, received_by__employee__id=emp).aggregate(
                            Sum('payment_toward_principle'))['payment_toward_principle__sum']
                    positive_adjustment_attorney_payment = \
                        billing_summary.filter(payment_method=12, received_by__employee__id=emp).aggregate(
                            Sum('payment_toward_principle'))['payment_toward_principle__sum']
                    adjustment_attorney_payment = (
                                                      positive_adjustment_attorney_payment if positive_adjustment_attorney_payment else 0) - (
                                                      adjustment_attorney_payments if adjustment_attorney_payments else 0)
                    adjustment_fine_payments = \
                        billing_summary.filter(payment_method=9, received_by__employee__id=emp).aggregate(
                            Sum('payment_toward_fine'))['payment_toward_fine__sum']
                    positive_adjustment_fine_payment = \
                        billing_summary.filter(payment_method=12, received_by__employee__id=emp).aggregate(
                            Sum('payment_toward_fine'))['payment_toward_fine__sum']
                    adjustment_fine_payment = (
                                                  positive_adjustment_fine_payment if positive_adjustment_fine_payment else 0) - (
                                                  adjustment_fine_payments if adjustment_fine_payments else 0)
                    retainer_adjustment_payments = retainer_charge_amount.filter(retainer_type=9,
                                                                                 created_by__employee__id=emp).aggregate(
                        Sum('net_amount'))['net_amount__sum']
                    retainer_positive_adjustments_payments = retainer_charge_amount.filter(retainer_type=11,
                                                                                           created_by__employee__id=emp).aggregate(
                        Sum('net_amount'))['net_amount__sum']
                    retainer_adjustment_payment = (
                                                      retainer_positive_adjustments_payments if retainer_positive_adjustments_payments else 0) - (
                                                      retainer_adjustment_payments if retainer_adjustment_payments else 0)
                    mis_adjustment_payments = \
                        mis_billing_summary.filter(created_by__employee__id=emp, status=7).aggregate(Sum('amount'))[
                            'amount__sum']
                    positive_mis_adjustment_payment = \
                        mis_billing_summary.filter(created_by__employee__id=emp, status=8).aggregate(Sum('amount'))[
                            'amount__sum']
                    mis_adjustment_payment = (
                                                 positive_mis_adjustment_payment if positive_mis_adjustment_payment else 0) - (
                                                 mis_adjustment_payments if mis_adjustment_payments else 0)
                    gov_adjustment_payments = \
                        gov_billing_summary.filter(created_by__employee__id=emp, status=7).aggregate(Sum('amount'))[
                            'amount__sum']
                    positive_gov_adjustment_payment = \
                        gov_billing_summary.filter(created_by__employee__id=emp, status=8).aggregate(Sum('amount'))[
                            'amount__sum']
                    gov_adjustment_payment = (
                                                 positive_gov_adjustment_payment if positive_gov_adjustment_payment else 0) - (
                                                 gov_adjustment_payments if gov_adjustment_payments else 0)
                    attorney_adjustment = ((adjustment_attorney_payment if adjustment_attorney_payment else 0) +
                                           (adjustment_fine_payment if adjustment_fine_payment else 0) +
                                           (mis_adjustment_payment if mis_adjustment_payment else 0) +
                                           (gov_adjustment_payment if gov_adjustment_payment else 0))
                    emp_dictionary['adjustment_payment'] = (attorney_adjustment if attorney_adjustment else 0) + (
                        retainer_adjustment_payment if retainer_adjustment_payment else 0)
                    # discount amount
                    discount_attorney_payment = \
                        billing_summary.filter(payment_method=7, received_by__employee__id=emp).aggregate(
                            Sum('payment_toward_principle'))['payment_toward_principle__sum']
                    discount_fine_payment = \
                        billing_summary.filter(payment_method=7, received_by__employee__id=emp).aggregate(
                            Sum('payment_toward_fine'))['payment_toward_fine__sum']
                    retainer_discount_payment = retainer_charge_amount.filter(retainer_type=7,
                                                                              created_by__employee__id=emp).aggregate(
                        Sum('net_amount'))['net_amount__sum']
                    mis_discount_payment = \
                        mis_billing_summary.filter(created_by__employee__id=emp, status=6).aggregate(Sum('amount'))[
                            'amount__sum']
                    gov_discount_payment = \
                        gov_billing_summary.filter(created_by__employee__id=emp, status=6).aggregate(Sum('amount'))[
                            'amount__sum']
                    emp_dictionary['discount_payment'] = (
                            (discount_attorney_payment if discount_attorney_payment else 0) +
                            (discount_fine_payment if discount_fine_payment else 0) + (
                                retainer_discount_payment if retainer_discount_payment else 0)
                            + (mis_discount_payment if mis_discount_payment else 0) +
                            (gov_discount_payment if gov_discount_payment else 0))

                    # total payments
                    attorney_payment = \
                        billing_summary.filter(payment_method__in=[1, 2, 3, 5, 6],
                                               received_by__employee__id=emp).aggregate(
                            Sum('payment_toward_principle'))['payment_toward_principle__sum']
                    attorney_fine_payment = \
                        billing_summary.filter(payment_method__in=[1, 2, 3, 5, 6],
                                               received_by__employee__id=emp).aggregate(
                            Sum('payment_toward_fine'))[
                            'payment_toward_fine__sum']
                    attorney_service_charge = \
                        billing_summary.filter(payment_method__in=[1, 2, 3, 5, 6],
                                               received_by__employee__id=emp).aggregate(
                            Sum('attorney_service_charges'))['attorney_service_charges__sum']
                    fine_service_charge = \
                        billing_summary.filter(payment_method__in=[1, 2, 3, 5, 6],
                                               received_by__employee__id=emp).aggregate(
                            Sum('fine_service_charges'))['fine_service_charges__sum']
                    retainer_payment = \
                        retainer_charge_amount.filter(payment_method__in=[1, 2, 3, 4, 5], retainer_type=2,
                                                      created_by__employee__id=emp).aggregate(Sum('net_amount'))[
                            'net_amount__sum']
                    reservation_payment = \
                        reservation.filter(created_by__employee__id=emp).aggregate(Sum('total_premium_price'))[
                            'total_premium_price__sum']
                    mis_payment = \
                        mis_billing_summary.filter(created_by__employee__id=emp, status=5).aggregate(Sum('amount'))[
                            'amount__sum']
                    gov_payment = \
                        gov_billing_summary.filter(created_by__employee__id=emp, status=5).aggregate(Sum('amount'))[
                            'amount__sum']
                    mis_service_charge = \
                        mis_billing_summary.filter(created_by__employee__id=emp, status=5).aggregate(
                            Sum('mis_service_charges'))['mis_service_charges__sum']
                    gov_service_charge = \
                        gov_billing_summary.filter(created_by__employee__id=emp, status=5).aggregate(
                            Sum('gov_service_charges'))['gov_service_charges__sum']
                    # contract_payment = contract.filter(created_by__employee__id=emp).aggregate(Sum('retainer_amount'))['retainer_amount__sum']
                    emp_dictionary['total_payment_received'] = ((attorney_payment if attorney_payment else 0) +
                                                                (attorney_fine_payment if attorney_fine_payment else 0)
                                                                + (retainer_payment if retainer_payment else 0) +
                                                                (reservation_payment if reservation_payment else 0) +
                                                                (mis_payment if mis_payment else 0) +
                                                                (gov_payment if gov_payment else 0) +
                                                                (
                                                                    attorney_service_charge if attorney_service_charge else 0)
                                                                + (fine_service_charge if fine_service_charge else 0) +
                                                                (mis_service_charge if mis_service_charge else 0) +
                                                                (gov_service_charge if gov_service_charge else 0))
                    reservation_paypal_payment = reservation.filter(created_by__employee__id=emp,
                                                                    payment_method=7).aggregate(
                        Sum('total_premium_price'))['total_premium_price__sum']
                    emp_dictionary['paypal_payment'] = reservation_paypal_payment if reservation_paypal_payment else 0
                    reservation_other_payment = reservation.filter(created_by__employee__id=emp,
                                                                   payment_method=8).aggregate(
                        Sum('total_premium_price'))['total_premium_price__sum']
                    emp_dictionary['other_payment'] = reservation_other_payment if reservation_other_payment else 0
                    contract_list.append(emp_dictionary)
                for comp in company:
                    comp_profile = Company.objects.filter(id=comp).last()
                    if comp_profile:
                        comp_dictionary = dict()
                        comp_dictionary['received_by'] = comp_profile.title
                        # total payment received
                        attorney_payment = \
                            billing_summary.filter(received_by__company__id=comp, payment_method__in=[1, 2, 3, 5, 6],
                                                   received_by__employee__isnull=True).aggregate(
                                Sum('payment_toward_principle'))[
                                'payment_toward_principle__sum']
                        attorney_fine_payment = \
                            billing_summary.filter(received_by__company__id=comp, payment_method__in=[1, 2, 3, 5, 6],
                                                   received_by__employee__isnull=True).aggregate(
                                Sum('payment_toward_fine'))[
                                'payment_toward_fine__sum']
                        attorney_services_charge = \
                            billing_summary.filter(payment_method__in=[1, 2, 3, 5, 6],
                                                   received_by__company__id=comp,
                                                   received_by__employee__isnull=True).aggregate(
                                Sum('attorney_service_charges'))['attorney_service_charges__sum']
                        fine_services_charge = \
                            billing_summary.filter(payment_method__in=[1, 2, 3, 5, 6],
                                                   received_by__company__id=comp,
                                                   received_by__employee__isnull=True).aggregate(
                                Sum('fine_service_charges'))['fine_service_charges__sum']
                        retainer_payment = retainer_charge_amount.filter(created_by__company__id=comp, retainer_type=2,
                                                                         payment_method__in=[1, 2, 3, 5, 6],
                                                                         created_by__employee__isnull=True).aggregate(
                            Sum('net_amount'))[
                            'net_amount__sum']
                        reservations_payment = \
                            reservation.filter(created_by__company__id=comp,
                                               created_by__employee__isnull=True).aggregate(
                                Sum('total_premium_price'))['total_premium_price__sum']
                        mis_payments = \
                            mis_billing_summary.filter(created_by__company__id=comp, created_by__employee__isnull=True,
                                                       status=5).aggregate(Sum('amount'))['amount__sum']
                        gov_payments = \
                            gov_billing_summary.filter(created_by__company__id=comp, created_by__employee__isnull=True,
                                                       status=5).aggregate(Sum('amount'))['amount__sum']
                        mis_services_charge = \
                            mis_billing_summary.filter(created_by__company__id=comp, status=5,
                                                       created_by__employee__isnull=True).aggregate(
                                Sum('mis_service_charges'))['mis_service_charges__sum']
                        gov_services_charge = \
                            gov_billing_summary.filter(created_by__company__id=comp, status=5,
                                                       created_by__employee__isnull=True).aggregate(
                                Sum('gov_service_charges'))['gov_service_charges__sum']
                        # contracts_payment = \
                        # contract.filter(created_by__company__id=comp, created_by__employee__isnull=True).aggregate(
                        #     Sum('retainer_amount'))['retainer_amount__sum']
                        comp_dictionary['total_payment_received'] = ((attorney_payment if attorney_payment else 0) +
                                                                     (
                                                                         attorney_fine_payment if attorney_fine_payment else 0)
                                                                     + (retainer_payment if retainer_payment else 0) +
                                                                     (
                                                                         reservations_payment if reservations_payment else 0) +
                                                                     (mis_payments if mis_payments else 0) +
                                                                     (gov_payments if gov_payments else 0) +
                                                                     (
                                                                         attorney_services_charge if attorney_services_charge else 0)
                                                                     + (
                                                                         fine_services_charge if fine_services_charge else 0)
                                                                     + (
                                                                         mis_services_charge if mis_services_charge else 0)
                                                                     + (
                                                                         gov_services_charge if gov_services_charge else 0))

                        # payment through credit card
                        credit_attorneys_payment = \
                            billing_summary.filter(payment_method=1, received_by__company__id=comp,
                                                   received_by__employee__isnull=True).aggregate(
                                Sum('payment_toward_principle'))['payment_toward_principle__sum']
                        credit_fines_payment = \
                            billing_summary.filter(payment_method=1, received_by__company__id=comp,
                                                   received_by__employee__isnull=True).aggregate(
                                Sum('payment_toward_fine'))['payment_toward_fine__sum']
                        attorney_credit_services_charge = \
                            billing_summary.filter(payment_method=1,
                                                   received_by__company__id=comp,
                                                   received_by__employee__isnull=True).aggregate(
                                Sum('attorney_service_charges'))['attorney_service_charges__sum']
                        fine_credit_services_charge = \
                            billing_summary.filter(payment_method=1,
                                                   received_by__company__id=comp,
                                                   received_by__employee__isnull=True).aggregate(
                                Sum('fine_service_charges'))['fine_service_charges__sum']
                        retainer_credits_payment = \
                            retainer_charge_amount.filter(payment_method=1, retainer_type=2,
                                                          created_by__employee__isnull=True,
                                                          created_by__company__id=comp).aggregate(
                                Sum('net_amount'))['net_amount__sum']
                        reservations_card_payment = reservation.filter(created_by__company__id=comp,
                                                                       created_by__employee__isnull=True,
                                                                       payment_method=1).aggregate(
                            Sum('total_premium_price'))['total_premium_price__sum']
                        mis_card_payments = \
                            mis_billing_summary.filter(created_by__company__id=comp, created_by__employee__isnull=True,
                                                       status=5, payment_method=1).aggregate(Sum('amount'))[
                                'amount__sum']
                        gov_card_payments = \
                            gov_billing_summary.filter(created_by__company__id=comp, created_by__employee__isnull=True,
                                                       status=5, payment_method=1).aggregate(Sum('amount'))[
                                'amount__sum']
                        mis__card_services_charge = \
                            mis_billing_summary.filter(created_by__company__id=comp, status=5, payment_method=1,
                                                       created_by__employee__isnull=True).aggregate(
                                Sum('mis_service_charges'))['mis_service_charges__sum']
                        gov_card_services_charge = \
                            gov_billing_summary.filter(created_by__company__id=comp, status=5, payment_method=1,
                                                       created_by__employee__isnull=True).aggregate(
                                Sum('gov_service_charges'))['gov_service_charges__sum']
                        # contracts_card_payment = \
                        # contract.filter(created_by__company__id=comp, created_by__employee__isnull=True,
                        #                 payment_method=1).aggregate(Sum('retainer_amount'))['retainer_amount__sum']
                        comp_dictionary['credit_payment'] = (
                                (credit_attorneys_payment if credit_attorneys_payment else 0) +
                                (credit_fines_payment if credit_fines_payment else 0) +
                                (retainer_credits_payment if retainer_credits_payment else 0)
                                + (reservations_card_payment if reservations_card_payment else 0)
                                + (mis_card_payments if mis_card_payments else 0) +
                                (gov_card_payments if gov_card_payments else 0) +
                                (attorney_credit_services_charge if attorney_credit_services_charge else 0) +
                                (fine_credit_services_charge if fine_credit_services_charge else 0)
                                + (mis__card_services_charge if mis__card_services_charge else 0)
                                + (gov_card_services_charge if gov_card_services_charge else 0))

                        # payment through check
                        check_attorneys_payment = \
                            billing_summary.filter(payment_method=2, received_by__company__id=comp,
                                                   received_by__employee__isnull=True).aggregate(
                                Sum('payment_toward_principle'))['payment_toward_principle__sum']
                        check_fines_payment = \
                            billing_summary.filter(payment_method=2, received_by__company__id=comp,
                                                   received_by__employee__isnull=True).aggregate(
                                Sum('payment_toward_fine'))['payment_toward_fine__sum']
                        attorney_check_services_charge = \
                            billing_summary.filter(payment_method=2,
                                                   received_by__company__id=comp,
                                                   received_by__employee__isnull=True).aggregate(
                                Sum('attorney_service_charges'))['attorney_service_charges__sum']
                        fine_check_services_charge = \
                            billing_summary.filter(payment_method=2,
                                                   received_by__company__id=comp,
                                                   received_by__employee__isnull=True).aggregate(
                                Sum('fine_service_charges'))['fine_service_charges__sum']
                        retainer_checks_payment = retainer_charge_amount.filter(payment_method=2, retainer_type=2,
                                                                                created_by__company__id=comp,
                                                                                created_by__employee__isnull=True).aggregate(
                            Sum('net_amount'))['net_amount__sum']
                        mis_check_payments = \
                            mis_billing_summary.filter(created_by__company__id=comp, created_by__employee__isnull=True,
                                                       status=5, payment_method=2).aggregate(Sum('amount'))[
                                'amount__sum']
                        gov_check_payments = \
                            gov_billing_summary.filter(created_by__company__id=comp, created_by__employee__isnull=True,
                                                       status=5, payment_method=2).aggregate(Sum('amount'))[
                                'amount__sum']
                        mis_check_services_charge = \
                            mis_billing_summary.filter(created_by__company__id=comp, status=5, payment_method=2,
                                                       created_by__employee__isnull=True).aggregate(
                                Sum('mis_service_charges'))['mis_service_charges__sum']
                        gov_check_services_charge = \
                            gov_billing_summary.filter(created_by__company__id=comp, status=5, payment_method=2,
                                                       created_by__employee__isnull=True).aggregate(
                                Sum('gov_service_charges'))['gov_service_charges__sum']
                        # contracts_check_payment = \
                        # contract.filter(created_by__company__id=comp, created_by__employee__isnull=True,
                        #                 payment_method=2).aggregate(Sum('retainer_amount'))['retainer_amount__sum']
                        reservations_check_payment = reservation.filter(created_by__company__id=comp,
                                                                        created_by__employee__isnull=True,
                                                                        payment_method=2).aggregate(
                            Sum('total_premium_price'))['total_premium_price__sum']
                        comp_dictionary['check_payment'] = (
                                (check_attorneys_payment if check_attorneys_payment else 0) + (
                            check_fines_payment if check_fines_payment else 0) + (
                                    retainer_checks_payment if retainer_checks_payment else 0) +
                                (mis_check_payments if mis_check_payments else 0) +
                                (gov_check_payments if gov_check_payments else 0) +
                                (reservations_check_payment if reservations_check_payment else 0) +
                                (attorney_check_services_charge if attorney_check_services_charge else 0) +
                                (fine_check_services_charge if fine_check_services_charge else 0)
                                + (mis_check_services_charge if mis_check_services_charge else 0)
                                + (gov_check_services_charge if gov_check_services_charge else 0))

                        # refund payment
                        refund_attorneys_payment = \
                            billing_summary.filter(payment_method=10, received_by__company__id=comp,
                                                   received_by__employee__isnull=True).aggregate(
                                Sum('payment_toward_principle'))['payment_toward_principle__sum']
                        check_refunds_payment = \
                            billing_summary.filter(payment_method=10, received_by__company__id=comp,
                                                   received_by__employee__isnull=True).aggregate(
                                Sum('payment_toward_fine'))['payment_toward_fine__sum']
                        retainer_refunds = retainer_charge_amount.filter(retainer_type=8,
                                                                         created_by__company__id=comp,
                                                                         created_by__employee__isnull=True).aggregate(
                            Sum('net_amount'))['net_amount__sum']
                        retainer_refunds_charges = retainer_charge_amount.filter(retainer_type=8,
                                                                                 created_by__company__id=comp,
                                                                                 created_by__employee__isnull=True).aggregate(
                            Sum('refund_charges'))['refund_charges__sum']
                        retainer_refunds_payment = ((retainer_refunds if retainer_refunds else 0) +
                                                    (retainer_refunds_charges if retainer_refunds_charges else 0))
                        mis_refund_payments = \
                            mis_billing_summary.filter(created_by__company__id=comp, created_by__employee__isnull=True,
                                                       status=3).aggregate(Sum('amount'))['amount__sum']
                        gov_refund_payments = \
                            gov_billing_summary.filter(created_by__company__id=comp, created_by__employee__isnull=True,
                                                       status=3).aggregate(Sum('amount'))['amount__sum']
                        comp_dictionary['refund_payment'] = (
                                (refund_attorneys_payment if refund_attorneys_payment else 0) + (
                            check_refunds_payment if check_refunds_payment else 0) + (
                                    retainer_refunds_payment if retainer_refunds_payment else 0)
                                + (mis_refund_payments if mis_refund_payments else 0) +
                                (gov_refund_payments if gov_refund_payments else 0))

                        # adjustment payment
                        adjustment_attorneys_payments = \
                            billing_summary.filter(payment_method=9, received_by__company__id=comp,
                                                   received_by__employee__isnull=True).aggregate(
                                Sum('payment_toward_principle'))['payment_toward_principle__sum']
                        positive_adjustment_attorneys_payment = \
                            billing_summary.filter(payment_method=12, received_by__company__id=comp,
                                                   received_by__employee__isnull=True).aggregate(
                                Sum('payment_toward_principle'))['payment_toward_principle__sum']
                        adjustment_attorneys_payment = (
                                                           positive_adjustment_attorneys_payment if positive_adjustment_attorneys_payment else 0) - (
                                                           adjustment_attorneys_payments if adjustment_attorneys_payments else 0)
                        adjustment_refunds_payments = \
                            billing_summary.filter(payment_method=9, received_by__company__id=comp,
                                                   received_by__employee__isnull=True).aggregate(
                                Sum('payment_toward_fine'))['payment_toward_fine__sum']
                        positive_adjustment_refunds_payment = \
                            billing_summary.filter(payment_method=12, received_by__company__id=comp,
                                                   received_by__employee__isnull=True).aggregate(
                                Sum('payment_toward_fine'))['payment_toward_fine__sum']
                        adjustment_refunds_payment = (
                                                         positive_adjustment_refunds_payment if positive_adjustment_refunds_payment else 0) - (
                                                         adjustment_refunds_payments if adjustment_refunds_payments else 0)
                        retainer_negative_adjustments_payment = retainer_charge_amount.filter(retainer_type=9,
                                                                                              created_by__company__id=comp,
                                                                                              created_by__employee__isnull=True).aggregate(
                            Sum('net_amount'))['net_amount__sum']
                        retainer_positive_adjustments_payment = retainer_charge_amount.filter(retainer_type=11,
                                                                                              created_by__company__id=comp,
                                                                                              created_by__employee__isnull=True).aggregate(
                            Sum('net_amount'))['net_amount__sum']
                        retainer_adjustments_payment = (
                                                           retainer_positive_adjustments_payment if retainer_positive_adjustments_payment else 0) - (
                                                           retainer_negative_adjustments_payment if retainer_negative_adjustments_payment else 0)
                        mis_adjust_payments = \
                            mis_billing_summary.filter(created_by__company__id=comp, created_by__employee__isnull=True,
                                                       status=7).aggregate(Sum('amount'))['amount__sum']
                        positive_mis_adjustment_payments = \
                            mis_billing_summary.filter(created_by__company__id=comp, created_by__employee__isnull=True,
                                                       status=8).aggregate(Sum('amount'))['amount__sum']
                        mis_adjustment_payments = (
                                                      positive_mis_adjustment_payments if positive_mis_adjustment_payments else 0) - (
                                                      mis_adjust_payments if mis_adjust_payments else 0)
                        gov_adjust_payments = \
                            gov_billing_summary.filter(created_by__company__id=comp, created_by__employee__isnull=True,
                                                       status=7).aggregate(Sum('amount'))['amount__sum']
                        positive_gov_adjustment_payments = \
                            gov_billing_summary.filter(created_by__company__id=comp, created_by__employee__isnull=True,
                                                       status=8).aggregate(Sum('amount'))['amount__sum']
                        gov_adjustment_payments = (
                                                      positive_gov_adjustment_payments if positive_gov_adjustment_payments else 0) - (
                                                      gov_adjust_payments if gov_adjust_payments else 0)
                        attorney_adjustment_fee = -(
                                (adjustment_attorneys_payment if adjustment_attorneys_payment else 0)
                                + (adjustment_refunds_payment if adjustment_refunds_payment else 0) +
                                (mis_adjustment_payments if mis_adjustment_payments else 0) +
                                (gov_adjustment_payments if gov_adjustment_payments else 0))
                        comp_dictionary['adjustment_payment'] = (
                                                                    attorney_adjustment_fee if attorney_adjustment_fee else 0) + (
                                                                    retainer_adjustments_payment if retainer_adjustments_payment else 0)

                        # discount payment
                        discount_attorneys_payment = \
                            billing_summary.filter(payment_method=7, received_by__company__id=comp,
                                                   received_by__employee__isnull=True).aggregate(
                                Sum('payment_toward_principle'))['payment_toward_principle__sum']
                        discount_refunds_payment = \
                            billing_summary.filter(payment_method=7, received_by__company__id=comp,
                                                   received_by__employee__isnull=True).aggregate(
                                Sum('payment_toward_fine'))['payment_toward_fine__sum']
                        retainer_discounts_payment = retainer_charge_amount.filter(retainer_type=7,
                                                                                   created_by__company__id=comp,
                                                                                   created_by__employee__isnull=True).aggregate(
                            Sum('net_amount'))['net_amount__sum']
                        mis_discount_payments = \
                            mis_billing_summary.filter(created_by__company__id=comp, created_by__employee__isnull=True,
                                                       status=6).aggregate(Sum('amount'))['amount__sum']
                        gov_discount_payments = \
                            gov_billing_summary.filter(created_by__company__id=comp, created_by__employee__isnull=True,
                                                       status=6).aggregate(Sum('amount'))['amount__sum']
                        comp_dictionary['discount_payment'] = ((
                                                                   discount_attorneys_payment if discount_attorneys_payment else 0) + (
                                                                   discount_refunds_payment if discount_refunds_payment else 0) + (
                                                                   retainer_discounts_payment if retainer_discounts_payment else 0)
                                                               + (
                                                                   mis_discount_payments if mis_discount_payments else 0) +
                                                               (gov_discount_payments if gov_discount_payments else 0))

                        # payment through cash
                        cash_attorneys_payment = \
                            billing_summary.filter(payment_method=3, received_by__company__id=comp,
                                                   received_by__employee__isnull=True).aggregate(
                                Sum('payment_toward_principle'))['payment_toward_principle__sum']
                        cash_fines_payment = \
                            billing_summary.filter(payment_method=3, received_by__company__id=comp,
                                                   received_by__employee__isnull=True).aggregate(
                                Sum('payment_toward_fine'))['payment_toward_fine__sum']
                        attorney_cash_services_charge = \
                            billing_summary.filter(payment_method=3,
                                                   received_by__company__id=comp,
                                                   received_by__employee__isnull=True).aggregate(
                                Sum('attorney_service_charges'))['attorney_service_charges__sum']
                        fine_cash_services_charge = \
                            billing_summary.filter(payment_method=3,
                                                   received_by__company__id=comp,
                                                   received_by__employee__isnull=True).aggregate(
                                Sum('fine_service_charges'))['fine_service_charges__sum']
                        retainer_cashs_payment = retainer_charge_amount.filter(payment_method=3, retainer_type=2,
                                                                               created_by__company__id=comp,
                                                                               created_by__employee__isnull=True).aggregate(
                            Sum('net_amount'))['net_amount__sum']
                        reservations_cash_payment = reservation.filter(created_by__company__id=comp,
                                                                       created_by__employee__isnull=True,
                                                                       payment_method=3).aggregate(
                            Sum('total_premium_price'))['total_premium_price__sum']
                        mis_cash_payments = \
                            mis_billing_summary.filter(created_by__company__id=comp, created_by__employee__isnull=True,
                                                       status=5, payment_method=3).aggregate(Sum('amount'))[
                                'amount__sum']
                        gov_cash_payments = \
                            gov_billing_summary.filter(created_by__company__id=comp, created_by__employee__isnull=True,
                                                       status=5, payment_method=3).aggregate(Sum('amount'))[
                                'amount__sum']
                        mis_cash_services_charge = \
                            mis_billing_summary.filter(created_by__company__id=comp, status=5, payment_method=3,
                                                       created_by__employee__isnull=True).aggregate(
                                Sum('mis_service_charges'))['mis_service_charges__sum']
                        gov_cash_services_charge = \
                            gov_billing_summary.filter(created_by__company__id=comp, status=5, payment_method=3,
                                                       created_by__employee__isnull=True).aggregate(
                                Sum('gov_service_charges'))['gov_service_charges__sum']
                        # contracts_cash_payment = \
                        # contract.filter(created_by__company__id=comp, created_by__employee__isnull=True,
                        #                 payment_method=3).aggregate(Sum('retainer_amount'))['retainer_amount__sum']
                        comp_dictionary['cash_payment'] = ((cash_attorneys_payment if cash_attorneys_payment else 0) + (
                            cash_fines_payment if cash_fines_payment else 0) + (
                                                               retainer_cashs_payment if retainer_cashs_payment else 0) +
                                                           (
                                                               reservations_cash_payment if reservations_cash_payment else 0) +
                                                           (mis_cash_payments if mis_cash_payments else 0) +
                                                           (gov_cash_payments if gov_cash_payments else 0) +
                                                           (
                                                               attorney_cash_services_charge if attorney_cash_services_charge else 0)
                                                           + (
                                                               fine_cash_services_charge if fine_cash_services_charge else 0)
                                                           + (
                                                               mis_cash_services_charge if mis_cash_services_charge else 0)
                                                           + (
                                                               gov_cash_services_charge if gov_cash_services_charge else 0))

                        # payment through account
                        account_attorneys_payment = \
                            billing_summary.filter(payment_method=5, received_by__company__id=comp,
                                                   received_by__employee__isnull=True).aggregate(
                                Sum('payment_toward_principle'))['payment_toward_principle__sum']
                        account_fines_payment = \
                            billing_summary.filter(payment_method=5, received_by__company__id=comp,
                                                   received_by__employee__isnull=True).aggregate(
                                Sum('payment_toward_fine'))['payment_toward_fine__sum']
                        attorney_account_services_charge = \
                            billing_summary.filter(payment_method=3,
                                                   received_by__company__id=comp,
                                                   received_by__employee__isnull=True).aggregate(
                                Sum('attorney_service_charges'))['attorney_service_charges__sum']
                        fine_account_services_charge = \
                            billing_summary.filter(payment_method=3,
                                                   received_by__company__id=comp,
                                                   received_by__employee__isnull=True).aggregate(
                                Sum('fine_service_charges'))['fine_service_charges__sum']
                        retainer_accounts_payment = retainer_charge_amount.filter(payment_method=5, retainer_type=2,
                                                                                  created_by__company__id=comp,
                                                                                  created_by__employee__isnull=True).aggregate(
                            Sum('net_amount'))['net_amount__sum']
                        mis_account_payments = \
                            mis_billing_summary.filter(created_by__company__id=comp, created_by__employee__isnull=True,
                                                       status=5, payment_method=5).aggregate(Sum('amount'))[
                                'amount__sum']
                        gov_account_payments = \
                            gov_billing_summary.filter(created_by__company__id=comp, created_by__employee__isnull=True,
                                                       status=5, payment_method=5).aggregate(Sum('amount'))[
                                'amount__sum']
                        mis_account_services_charge = \
                            mis_billing_summary.filter(created_by__company__id=comp, status=5, payment_method=5,
                                                       created_by__employee__isnull=True).aggregate(
                                Sum('mis_service_charges'))['mis_service_charges__sum']
                        gov_account_services_charge = \
                            gov_billing_summary.filter(created_by__company__id=comp, status=5, payment_method=5,
                                                       created_by__employee__isnull=True).aggregate(
                                Sum('gov_service_charges'))['gov_service_charges__sum']

                        reservations_account_payment = reservation.filter(created_by__company__id=comp,
                                                                          created_by__employee__isnull=True,
                                                                          payment_method=5).aggregate(
                            Sum('total_premium_price'))['total_premium_price__sum']
                        comp_dictionary['direct_account_payment'] = (
                                (account_attorneys_payment if account_attorneys_payment else 0) + (
                            account_fines_payment if account_fines_payment else 0) + (
                                    retainer_accounts_payment if retainer_accounts_payment else 0)
                                + (mis_account_payments if mis_account_payments else 0) +
                                (reservations_account_payment if reservations_account_payment else 0) +
                                (gov_account_payments if gov_account_payments else 0)
                                + (attorney_account_services_charge if attorney_account_services_charge else 0) + (
                                    fine_account_services_charge if fine_account_services_charge else 0) +
                                (mis_account_services_charge if mis_account_services_charge else 0) +
                                (gov_account_services_charge if gov_account_services_charge else 0))
                        reservations_paypal_payment = reservation.filter(created_by__company__id=comp,
                                                                         created_by__employee__isnull=True,
                                                                         payment_method=7).aggregate(
                            Sum('total_premium_price'))['total_premium_price__sum']
                        comp_dictionary[
                            'paypal_payment'] = reservations_paypal_payment if reservations_paypal_payment else 0
                        reservations_other_payment = reservation.filter(created_by__company__id=comp,
                                                                        created_by__employee__isnull=True,
                                                                        payment_method=8).aggregate(
                            Sum('total_premium_price'))['total_premium_price__sum']
                        comp_dictionary[
                            'other_payment'] = reservations_other_payment if reservations_other_payment else 0
                        contract_list.append(comp_dictionary)
                return Response(contract_list, status=status.HTTP_200_OK)
        except Exception as e:
            return Response({ERROR: REST_ERR_GENERIC, MESSAGE: str(e)}, status=status.HTTP_400_BAD_REQUEST)


class EmployeeWorkTimeViewSet(mixins.ListModelMixin,
                              GenericViewSet):
    authentication_classes = (CompanyUserAuthentication,)

    def list(self, request, *args, **kwargs):
        try:
            auth_token = request.META['HTTP_AUTHORIZATION']
            user = CompanySessions.objects.filter(auth_token__exact=auth_token, is_active=True).last().user
            date = request.GET.get('date')
            service_time = list()
            retainer_service_time = BillingRetainerHistory.objects.filter(office__id=user.office.id,
                                                                          retainer_type=0,
                                                                          date=date)
            retainer_employees_service_time = list(
                retainer_service_time.filter(staff__isnull=False).values_list('staff_id', flat=True))
            employees_service = set(retainer_employees_service_time)
            for service_ in employees_service:
                employee_dict = dict()
                employee_time = retainer_service_time.filter(retainer_type=0,
                                                             staff__id=service_)
                employee_profile = EmployeesProfile.objects.filter(id=service_).last()
                employee_dict['employee_name'] = employee_profile.first_name + ' ' + employee_profile.last_name
                employee_dict['total_tme'] = employee_time.aggregate(Sum('time'))['time__sum']
                total_amount = employee_time.aggregate(Sum('net_amount'))['net_amount__sum']
                employee_dict['total_amount'] = total_amount.__round__(2)
                total_tme_in_hours = employee_time.aggregate(Sum('time_in_hours'))['time_in_hours__sum']
                employee_dict['total_tme_in_hours'] = total_tme_in_hours.__round__(2)
                service_time.append(employee_dict)
            return Response(service_time, status=status.HTTP_200_OK)
        except Exception as e:
            return Response({ERROR: REST_ERR_GENERIC, MESSAGE: str(e)}, status=status.HTTP_400_BAD_REQUEST)


# employee work time case wise
class EmployeeWorkTimeCaseWiseViewSet(mixins.ListModelMixin,
                                      GenericViewSet):
    authentication_classes = (CompanyUserAuthentication,)

    def list(self, request, *args, **kwargs):
        try:
            auth_token = request.META['HTTP_AUTHORIZATION']
            user = CompanySessions.objects.filter(auth_token__exact=auth_token, is_active=True).last().user
            date = request.GET.get('date')
            service_time = list()
            retainer_service_time = BillingRetainerHistory.objects.filter(office__id=user.office.id,
                                                                          retainer_type=0,
                                                                          date=date)
            retainer_employees_service_time = list(
                retainer_service_time.values_list('client_contract_id', flat=True))
            employees_service = set(retainer_employees_service_time)
            for service_ in employees_service:
                retainer_employees_case_time = list(
                    retainer_service_time.filter(client_contract__id=service_).values_list('staff_id', flat=True))
                employees_service_case = set(retainer_employees_case_time)

                for employee in employees_service_case:
                    employee_dict = dict()
                    employee_time = retainer_service_time.filter(retainer_type=0,
                                                                 staff__id=employee, client_contract__id=service_)
                    employee_profile = EmployeesProfile.objects.filter(id=employee).last()
                    if employee_profile:
                        employee_dict['employee_name'] = employee_profile.first_name + ' ' + employee_profile.last_name
                    employee_dict['total_tme'] = employee_time.aggregate(Sum('time'))['time__sum']
                    total_tme_in_hours = employee_time.aggregate(Sum('time_in_hours'))['time_in_hours__sum']
                    total_amount = employee_time.aggregate(Sum('net_amount'))['net_amount__sum']
                    employee_dict['total_amount'] = total_amount.__round__(2)
                    employee_dict['total_tme_in_hours'] = total_tme_in_hours.__round__(2)
                    if ClientCaseContract.objects.filter(contract__id=service_).exists():
                        cases = ClientCaseContract.objects.filter(contract__id=service_).distinct("case_id")
                        case_id = ""
                        for item in cases:
                            if case_id:
                                case_id += ", " + item.case.client_ids
                            else:
                                case_id += item.case.client_ids
                        cases_id = case_id
                    elif MultipleCases.objects.filter(client_contract__id=service_).exists():
                        cases = MultipleCases.objects.filter(client_contract__id=service_)
                        case_id = ""
                        for item in cases:
                            if case_id:
                                case_id += ", " + item.client_ids
                            else:
                                case_id += item.client_ids
                        cases_id = case_id
                    else:
                        cases_id = ""
                    if ClientCaseContract.objects.filter(contract__id=service_).exists():
                        clients = ClientCaseContract.objects.filter(contract__id=service_).distinct("client_id")
                        clients_id = ""
                        for items in clients:
                            if clients_id:
                                clients_id += ", " + items.client.first_name + ' ' + items.client.last_name
                            else:
                                clients_id += items.client.first_name + ' ' + items.client.last_name
                        clients_id = clients_id
                    elif MultipleCases.objects.filter(client_contract__id=service_).exists():
                        clients = MultipleCases.objects.filter(client_contract__id=service_)
                        clients_id = ""
                        for items in clients:
                            if clients_id:
                                clients_id += ", " + items.client.first_name + ' ' + items.client.last_name
                            else:
                                clients_id += items.client.first_name + ' ' + items.client.last_name
                        clients_id = clients_id
                    else:
                        clients_id = ""
                    if ClientCaseContract.objects.filter(contract__id=service_).exists():
                        clients_name_ids = ClientCaseContract.objects.filter(contract__id=service_).distinct(
                            "client_id")
                        clients_ids = ""
                        for items_id in clients_name_ids:
                            if clients_ids:
                                clients_ids += ", " + items_id.client.client_id
                            else:
                                clients_ids += items_id.client.client_id
                        clients_ids = clients_ids
                    elif MultipleCases.objects.filter(client_contract__id=service_).exists():
                        clients = MultipleCases.objects.filter(client_contract__id=service_)
                        clients_ids = ""
                        for items_id in clients:
                            if clients_ids:
                                clients_ids += ", " + items_id.client.client_id
                            else:
                                clients_ids += items_id.client.client_id
                        clients_ids = clients_ids
                    else:
                        clients_ids = ""
                    employee_dict['cases_id'] = cases_id
                    employee_dict['client_name'] = clients_id
                    employee_dict['client_id'] = clients_ids
                    service_time.append(employee_dict)
            return Response(service_time, status=status.HTTP_200_OK)
        except Exception as e:
            return Response({ERROR: REST_ERR_GENERIC, MESSAGE: str(e)}, status=status.HTTP_400_BAD_REQUEST)


# transaction summary
class TransactionSummaryViewSet(mixins.ListModelMixin,
                                GenericViewSet):
    authentication_classes = (CompanyUserAuthentication,)

    def list(self, request, *args, **kwargs):
        try:
            auth_token = request.META['HTTP_AUTHORIZATION']
            user = CompanySessions.objects.filter(auth_token__exact=auth_token, is_active=True).last().user
            date = request.GET.get('date')
            service_time = list()
            retainer_service_time = BillingRetainerHistory.objects.filter(office__id=user.office.id,
                                                                          retainer_type=2,
                                                                          date=date).order_by('sort_order')
            for retainer in retainer_service_time:
                retainer_dictionary = dict()
                utc_datetime = retainer.created_at.replace(tzinfo=timezone.utc)
                desired_timezone = pytz.timezone(user.company.timezone)  # Adjust to your desired timezone
                retainer_date = utc_datetime.astimezone(desired_timezone)
                retainer_dictionary['created_at'] = retainer_date
                # retainer_dictionary['created_at'] = retainer.created_at
                if retainer.created_by:
                    if retainer.created_by.employee:
                        received_by = (
                                          retainer.created_by.employee.first_name if retainer.created_by else "") + " " + (
                                          retainer.created_by.employee.last_name if retainer.created_by else "")
                    elif retainer.created_by.company:
                        received_by = retainer.created_by.company.title if retainer.created_by else ""
                    else:
                        received_by = ""
                else:
                    received_by = ""
                retainer_dictionary['received_by'] = received_by
                retainer_dictionary['amount'] = retainer.net_amount if retainer.net_amount else 0
                retainer_dictionary['transaction_id'] = retainer.id
                retainer_dictionary['transaction_type'] = "retainer"
                retainer_dictionary['payment_method'] = retainer.payment_method
                # if TransactionSummaryLeaves.objects.filter(retainer__id=retainer.id).exists():
                #     invoice_receipt = TransactionSummaryLeaves.objects.filter(retainer__id=retainer.id).last()
                #     retainer_dictionary[
                #         'invoice_receipt'] = invoice_receipt.invoice_receipt.url if invoice_receipt else ''
                if BillingRetainerHistoryLeaves.objects.filter(retainer__id=retainer.id).exists():
                    invoice_receipt = BillingRetainerHistoryLeaves.objects.filter(retainer__id=retainer.id).last()
                    retainer_dictionary[
                        'invoice_receipt'] = python_base_url + invoice_receipt.invoice_receipt.url if invoice_receipt else ''
                else:
                    retainer_dictionary['invoice_receipt'] = ''
                if ClientCaseContract.objects.filter(contract__id=retainer.client_contract.id).exists():
                    cases = ClientCaseContract.objects.filter(contract__id=retainer.client_contract.id).distinct(
                        "case_id")
                    case_id = ""
                    for item in cases:
                        if case_id:
                            case_id += ", " + item.case.client_ids
                        else:
                            case_id += item.case.client_ids
                    cases_id = case_id
                elif MultipleCases.objects.filter(client_contract__id=retainer.client_contract.id).exists():
                    cases = MultipleCases.objects.filter(client_contract__id=retainer.client_contract.id)
                    case_id = ""
                    for item in cases:
                        if case_id:
                            case_id += ", " + item.client_ids
                        else:
                            case_id += item.client_ids
                    cases_id = case_id
                else:
                    cases_id = ""
                if ClientCaseContract.objects.filter(contract__id=retainer.client_contract.id).exists():
                    clients = ClientCaseContract.objects.filter(contract__id=retainer.client_contract.id).distinct(
                        "client_id")
                    clients_id = ""
                    for items in clients:
                        if clients_id:
                            clients_id += ", " + items.client.first_name + ' ' + items.client.last_name
                        else:
                            clients_id += items.client.first_name + ' ' + items.client.last_name
                    clients_id = clients_id
                elif MultipleCases.objects.filter(client_contract__id=retainer.client_contract.id).exists():
                    clients = MultipleCases.objects.filter(client_contract__id=retainer.client_contract.id)
                    clients_id = ""
                    for items in clients:
                        if clients_id:
                            clients_id += ", " + items.client.client_id
                        else:
                            clients_id += items.client.client_id
                    clients_id = clients_id
                else:
                    clients_id = ""
                retainer_dictionary['case_id'] = cases_id
                retainer_dictionary['client_name'] = clients_id
                service_time.append(retainer_dictionary)
            miscellaneous_fee = MiscellaneousFee.objects.filter(office__id=user.office.id,
                                                                amount_added=False, transaction__isnull=True, status=5,
                                                                created_at__date=date).order_by('-id')
            for miscellaneous in miscellaneous_fee:
                miscellaneous_dictionary = dict()
                utc_datetime = miscellaneous.created_at.replace(tzinfo=timezone.utc)
                desired_timezone = pytz.timezone(user.company.timezone)  # Adjust to your desired timezone
                miscellaneous_date = utc_datetime.astimezone(desired_timezone)
                miscellaneous_dictionary['created_at'] = miscellaneous_date
                # miscellaneous_dictionary['created_at'] = miscellaneous.created_at
                if miscellaneous.created_by:
                    if miscellaneous.created_by.employee:
                        received_by = (
                                          miscellaneous.created_by.employee.first_name if miscellaneous.created_by else "") + " " + (
                                          miscellaneous.created_by.employee.last_name if miscellaneous.created_by else "")
                    elif miscellaneous.created_by.company:
                        received_by = miscellaneous.created_by.company.title if miscellaneous.created_by else ""
                    else:
                        received_by = ""
                else:
                    received_by = ""
                miscellaneous_dictionary['received_by'] = received_by
                miscellaneous_dictionary['amount'] = miscellaneous.amount if miscellaneous.amount else 0
                miscellaneous_dictionary['transaction_id'] = miscellaneous.id
                if miscellaneous.type == "miscellaneous":
                    miscellaneous_dictionary['transaction_type'] = "miscellaneous"
                else:
                    miscellaneous_dictionary['transaction_type'] = "goverment_fee"
                miscellaneous_dictionary['payment_method'] = miscellaneous.payment_method
                # if TransactionSummaryLeaves.objects.filter(goverment_fee__id=miscellaneous.id).exists():
                #     invoice_receipt = TransactionSummaryLeaves.objects.filter(goverment_fee__id=miscellaneous.id).last()
                #     miscellaneous_dictionary[
                #         'invoice_receipt'] = invoice_receipt.invoice_receipt.url if invoice_receipt else ''
                if BillingTransactionLeaves.objects.filter(goverment_fee__id=miscellaneous.id).exists():
                    invoice_receipt = BillingTransactionLeaves.objects.filter(goverment_fee__id=miscellaneous.id).last()
                    miscellaneous_dictionary[
                        'invoice_receipt'] = python_base_url + invoice_receipt.invoice_receipt.url if invoice_receipt else ''
                else:
                    miscellaneous_dictionary['invoice_receipt'] = ''
                if ClientCaseContract.objects.filter(contract__id=miscellaneous.client_contract.id).exists():
                    cases = ClientCaseContract.objects.filter(contract__id=miscellaneous.client_contract.id).distinct(
                        "case_id")
                    case_id = ""
                    for item in cases:
                        if case_id:
                            case_id += ", " + item.case.client_ids
                        else:
                            case_id += item.case.client_ids
                    cases_id = case_id
                elif MultipleCases.objects.filter(client_contract__id=miscellaneous.client_contract.id).exists():
                    cases = MultipleCases.objects.filter(client_contract__id=miscellaneous.client_contract.id)
                    case_id = ""
                    for item in cases:
                        if case_id:
                            case_id += ", " + item.client_ids
                        else:
                            case_id += item.client_ids
                    cases_id = case_id
                else:
                    cases_id = ""
                if ClientCaseContract.objects.filter(contract__id=miscellaneous.client_contract.id).exists():
                    clients = ClientCaseContract.objects.filter(contract__id=miscellaneous.client_contract.id).distinct(
                        "client_id")
                    clients_id = ""
                    for items in clients:
                        if clients_id:
                            clients_id += ", " + items.client.first_name + ' ' + items.client.last_name
                        else:
                            clients_id += items.client.first_name + ' ' + items.client.last_name
                    clients_id = clients_id
                elif MultipleCases.objects.filter(client_contract__id=miscellaneous.client_contract.id).exists():
                    clients = MultipleCases.objects.filter(client_contract__id=miscellaneous.client_contract.id)
                    clients_id = ""
                    for items in clients:
                        if clients_id:
                            clients_id += ", " + items.client.client_id
                        else:
                            clients_id += items.client.client_id
                    clients_id = clients_id
                else:
                    clients_id = ""
                miscellaneous_dictionary['case_id'] = cases_id
                miscellaneous_dictionary['client_name'] = clients_id
                service_time.append(miscellaneous_dictionary)
            billing_summary = BillingInstallmentPaidSummary.objects.filter(Q(payment_toward_principle__gt=0) |
                                                                           Q(payment_toward_fine__gt=0),
                                                                           created_at__date=date,
                                                                           payment_method__in=[1, 2, 3, 5, 6],
                                                                           installment__office__id=user.office.id).order_by(
                '-id')
            for billing in billing_summary:
                billing_dictionary = dict()
                utc_datetime = billing.created_at.replace(tzinfo=timezone.utc)
                desired_timezone = pytz.timezone(user.company.timezone)  # Adjust to your desired timezone
                billing_date = utc_datetime.astimezone(desired_timezone)
                billing_dictionary['created_at'] = billing_date
                # billing_dictionary['created_at'] = billing.created_at
                if billing.received_by:
                    if billing.received_by.employee:
                        received_by = (
                                          billing.received_by.employee.first_name if billing.received_by else "") + " " + (
                                          billing.received_by.employee.last_name if billing.received_by else "")
                    elif billing.received_by.company:
                        received_by = billing.received_by.company.title if billing.received_by else ""
                    else:
                        received_by = ""
                else:
                    received_by = ""
                billing_dictionary['received_by'] = received_by
                if MiscellaneousFee.objects.filter(transaction__id=billing.id, amount_added=False).exists():
                    mis_bill = \
                        MiscellaneousFee.objects.filter(transaction__id=billing.id, amount_added=False).aggregate(
                            Sum('amount'))[
                            'amount__sum']
                else:
                    mis_bill = 0
                billing_dictionary['amount'] = (
                        (billing.payment_toward_principle if billing.payment_toward_principle else 0) +
                        (billing.payment_toward_fine if billing.payment_toward_fine else 0) + (
                            mis_bill if mis_bill else 0))
                billing_dictionary['transaction_id'] = billing.id
                billing_dictionary['transaction_type'] = "fixed"
                billing_dictionary['payment_method'] = billing.payment_method
                # if TransactionSummaryLeaves.objects.filter(fixed__id=billing.id).exists():
                #     invoice_receipt = TransactionSummaryLeaves.objects.filter(fixed__id=billing.id).last()
                #     billing_dictionary[
                #         'invoice_receipt'] = invoice_receipt.invoice_receipt.url if invoice_receipt else ''
                if BillingTransactionLeaves.objects.filter(transaction__id=billing.id).exists():
                    invoice_receipt = BillingTransactionLeaves.objects.filter(transaction__id=billing.id).last()
                    billing_dictionary[
                        'invoice_receipt'] = python_base_url + invoice_receipt.invoice_receipt.url if invoice_receipt else ''
                else:
                    billing_dictionary['invoice_receipt'] = ''
                if ClientCaseContract.objects.filter(contract__id=billing.installment.client_contract.id).exists():
                    cases = ClientCaseContract.objects.filter(
                        contract__id=billing.installment.client_contract.id).distinct("case_id")
                    case_id = ""
                    for item in cases:
                        if case_id:
                            case_id += ", " + item.case.client_ids
                        else:
                            case_id += item.case.client_ids
                    cases_id = case_id
                elif MultipleCases.objects.filter(client_contract__id=billing.installment.client_contract.id).exists():
                    cases = MultipleCases.objects.filter(client_contract__id=billing.installment.client_contract.id)
                    case_id = ""
                    for item in cases:
                        if case_id:
                            case_id += ", " + item.client_ids
                        else:
                            case_id += item.client_ids
                    cases_id = case_id
                else:
                    cases_id = ""
                if ClientCaseContract.objects.filter(contract__id=billing.installment.client_contract.id).exists():
                    clients = ClientCaseContract.objects.filter(
                        contract__id=billing.installment.client_contract.id).distinct("client_id")
                    clients_id = ""
                    for items in clients:
                        if clients_id:
                            clients_id += ", " + items.client.first_name + ' ' + items.client.last_name
                        else:
                            clients_id += items.client.first_name + ' ' + items.client.last_name
                    clients_id = clients_id
                elif MultipleCases.objects.filter(client_contract__id=billing.installment.client_contract.id).exists():
                    clients = MultipleCases.objects.filter(client_contract__id=billing.installment.client_contract.id)
                    clients_id = ""
                    for items in clients:
                        if clients_id:
                            clients_id += ", " + items.client.client_id
                        else:
                            clients_id += items.client.client_id
                    clients_id = clients_id
                else:
                    clients_id = ""
                billing_dictionary['case_id'] = cases_id
                billing_dictionary['client_name'] = clients_id
                service_time.append(billing_dictionary)

            # reservation logs
            reservations = ReservationConsalatation.objects.filter(office__id=user.office.id, payment_status=1,
                                                                   payment_date__date=date).order_by('-id')
            for reservation in reservations:
                reservation_dictionary = dict()
                utc_datetime = reservation.payment_date.replace(tzinfo=timezone.utc)
                desired_timezone = pytz.timezone(user.company.timezone)  # Adjust to your desired timezone
                reservation_date = utc_datetime.astimezone(desired_timezone)
                reservation_dictionary['created_at'] = reservation_date
                # reservation_dictionary['created_at'] = reservation.payment_date
                if reservation.created_by:
                    if reservation.created_by.employee:
                        received_by = (
                                          reservation.created_by.employee.first_name if reservation.created_by else "") + " " + (
                                          reservation.created_by.employee.last_name if reservation.created_by else "")
                    elif reservation.created_by.company:
                        received_by = reservation.created_by.company.title if reservation.created_by else ""
                    else:
                        received_by = ""
                else:
                    received_by = ""
                reservation_dictionary['received_by'] = received_by
                reservation_dictionary['amount'] = get_reservation_amount(reservation)
                # reservation_dictionary[
                #     'amount'] = reservation.total_premium_price if reservation.total_premium_price else 0
                reservation_dictionary['transaction_id'] = reservation.id
                reservation_dictionary['transaction_type'] = "reservation"
                reservation_dictionary['payment_method'] = reservation.payment_method
                if TransactionSummaryLeaves.objects.filter(reservation__id=reservation.id).exists():
                    invoice_receipt = TransactionSummaryLeaves.objects.filter(reservation__id=reservation.id).last()
                    reservation_dictionary[
                        'invoice_receipt'] = python_base_url + invoice_receipt.invoice_receipt.url if invoice_receipt else ''
                else:
                    reservation_dictionary['invoice_receipt'] = ''
                reservation_dictionary['case_id'] = reservation.reference_no
                reservation_dictionary['client_name'] = reservation.first_name + ' ' + reservation.last_name
                service_time.append(reservation_dictionary)
            sorted_data = sorted(service_time, key=lambda x: x['created_at'], reverse=True)
            return Response(sorted_data, status=status.HTTP_200_OK)
        except Exception as e:
            return Response({ERROR: REST_ERR_GENERIC, MESSAGE: str(e)}, status=status.HTTP_400_BAD_REQUEST)


# retainer leaves
class RetainerInvoiceImageUploadViewSet(mixins.UpdateModelMixin,
                                        GenericViewSet):
    authentication_classes = (CompanyUserAuthentication,)

    def update(self, request, *args, **kwargs):
        try:
            data = request.data
            dictionary = dict()
            retainer = BillingRetainerHistory.objects.get(pk=kwargs.get('pk'))
            dictionary['retainer'] = retainer.id
            dictionary['invoice_receipt'] = data['invoice_receipt']
            dictionary['content_type'] = data['invoice_receipt'].content_type
            dictionary['name'] = data['invoice_receipt'].name
            dictionary['file_size'] = size(data['invoice_receipt'].size, system=verbose)
            serializer = BillingRetainerLeavesSerializer(data=dictionary)
            if serializer.is_valid():
                serializer.save()
                receipt = serializer.instance
                invoice_data = BillingRetainerLeavesDetailSerializer(receipt).data
                return Response({SUCCESS: True, "data": invoice_data}, status=status.HTTP_200_OK)
            return Response({SUCCESS: False, ERROR: serializer.errors}, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            return Response({ERROR: REST_ERR_GENERIC, MESSAGE: str(e)}, status=status.HTTP_400_BAD_REQUEST)


# transaction summary leaves
class TransactionSummaryInvoiceImageUploadViewSet(mixins.UpdateModelMixin,
                                                  GenericViewSet):
    authentication_classes = (CompanyUserAuthentication,)

    def update(self, request, *args, **kwargs):
        try:
            data = request.data
            if data['transaction_type'] == "reservation":
                dictionary = dict()
                reservation = ReservationConsalatation.objects.get(pk=kwargs.get('pk'))
                dictionary['reservation'] = reservation.id
                dictionary['invoice_receipt'] = data['invoice_receipt']
                dictionary['content_type'] = data['invoice_receipt'].content_type
                dictionary['name'] = data['invoice_receipt'].name
                dictionary['file_size'] = size(data['invoice_receipt'].size, system=verbose)
                serializer = TransactionSummaryLeavesSerializer(data=dictionary)
                if serializer.is_valid():
                    serializer.save()
                    receipt = serializer.instance
                    invoice_data = TransactionSummaryLeavesDetailSerializer(receipt).data
                    return Response({SUCCESS: True, "data": invoice_data}, status=status.HTTP_200_OK)
            elif data['transaction_type'] == "fixed" or data['transaction_type'] == "goverment_fee":
                dictionary = dict()
                if data['transaction_type'] == "goverment_fee":
                    goverment_fee = MiscellaneousFee.objects.get(pk=kwargs.get('pk'))
                    dictionary['goverment_fee'] = goverment_fee.id
                else:
                    dictionary['goverment_fee'] = None
                if data['transaction_type'] == "fixed":
                    fixed = BillingInstallmentPaidSummary.objects.get(pk=kwargs.get('pk'))
                    dictionary['transaction'] = fixed.id
                else:
                    dictionary['fixed'] = None
                dictionary['invoice_receipt'] = data['invoice_receipt']
                dictionary['content_type'] = data['invoice_receipt'].content_type
                dictionary['name'] = data['invoice_receipt'].name
                dictionary['file_size'] = size(data['invoice_receipt'].size, system=verbose)
                serializer = BillingTransactionLeavesSerializer(data=dictionary)
                if serializer.is_valid():
                    serializer.save()
                    receipt = serializer.instance
                    invoice_data = BillingTransactionLeavesDetailSerializer(receipt).data
                    return Response({SUCCESS: True, "data": invoice_data}, status=status.HTTP_200_OK)
            else:
                dictionary = dict()
                retainer = BillingRetainerHistory.objects.get(pk=kwargs.get('pk'))
                dictionary['retainer'] = retainer.id
                dictionary['invoice_receipt'] = data['invoice_receipt']
                dictionary['content_type'] = data['invoice_receipt'].content_type
                dictionary['name'] = data['invoice_receipt'].name
                dictionary['file_size'] = size(data['invoice_receipt'].size, system=verbose)
                serializer = BillingRetainerLeavesSerializer(data=dictionary)
                if serializer.is_valid():
                    serializer.save()
                    receipt = serializer.instance
                    invoice_data = BillingRetainerLeavesDetailSerializer(receipt).data
                    return Response({SUCCESS: True, "data": invoice_data}, status=status.HTTP_200_OK)
        except Exception as e:
            return Response({ERROR: REST_ERR_GENERIC, MESSAGE: str(e)}, status=status.HTTP_400_BAD_REQUEST)


# last payment delayed contract
class DelayedContractFeeReportViewSet(mixins.ListModelMixin,
                                      GenericViewSet):
    authentication_classes = (CompanyUserAuthentication,)

    def list(self, request, *args, **kwargs):
        try:
            auth_token = request.META['HTTP_AUTHORIZATION']
            user = CompanySessions.objects.filter(auth_token__exact=auth_token, is_active=True).last().user
            contracts = ClientReservationContract.objects.filter(office__id=user.office.id, contract_fully_paid=False,
                                                                 sign_contract=True, signature=True,
                                                                 add_cases=True, is_retainer=False).order_by('-id')
            # immigration_contract = contracts.filter(reservation__consalatation_reason__code='immigration')
            # family_contract = contracts.filter(reservation__consalatation_reason__code='familylaw')
            # delay_imm_contract = contracts.filter(reservation__consalatation_reason__code='delayed_immigration')
            # contracts = chain(immigration_contract, family_contract, delay_imm_contract)
            contract_list = list()
            for contract in contracts:
                installment = FixedBillingTransactionHistory.objects.filter(client_contract=contract).last()
                if installment:
                    # previous_installment = FixedBillingTransactionHistory.objects.filter(client_contract=contract).last()
                    previous_installment = FixedBillingTransactionHistory.objects.exclude(id=installment.id).filter(
                        client_contract=contract).last()
                    if previous_installment and ((
                                                         previous_installment.remaining_principle > 0 and previous_installment.remaining_principle > installment.payment_toward_principle) or previous_installment.remaining_fine > 0):
                        if installment.payment_toward_principle <= previous_installment.remaining_principle or installment.payment_toward_fine <= previous_installment.remaining_fine:
                            contract_list.append(contract)
            attorney_fee = list()
            for obj in contract_list:
                installment_dictionary = dict()
                if obj.created_by:
                    if obj.created_by.employee:
                        received_by = (
                                          obj.created_by.employee.first_name if obj.created_by else "") + " " + (
                                          obj.created_by.employee.last_name if obj.created_by else "")
                    elif obj.created_by.company:
                        received_by = obj.created_by.company.title if obj.created_by else ""
                    else:
                        received_by = ""
                else:
                    received_by = ""
                installment_dictionary['received_by'] = received_by
                months = FixedBillingTransactionHistory.objects.filter(
                    client_contract__id=obj.id).last()
                no_of_months = FixedBillingTransactionHistory.objects.filter(
                    client_contract__id=obj.id, created_at__lt=months.created_at)
                installment_count = 0
                for count in no_of_months:
                    if count.remaining_principle > 0:
                        installment_count += installment_count + 1
                    else:
                        installment_count = 0
                total_count = installment_count
                remaining_amount = FixedBillingTransactionHistory.objects.filter(client_contract__id=obj.id).last()
                # installment_dictionary['no_of_months'] = total_count if total_count else 0
                installment_dictionary['no_of_months'] = get_installment_count(obj.id)
                installment_dictionary[
                    'remaining_attorney_fee'] = remaining_amount.remaining_principle if remaining_amount else 0
                installment_dictionary['remaining_fine'] = remaining_amount.remaining_fine if remaining_amount else 0
                # pay_principle = FixedBillingTransactionHistory.objects.filter(client_contract__id=obj.id, status=3).last()
                pay_principle = FixedBillingTransactionHistory.objects.filter(client_contract__id=obj.id, status=3)
                if pay_principle:
                    # summary = BillingInstallmentPaidSummary.objects.filter(installment__id=pay_principle.id, payment_method__in=[1, 2, 3, 4, 5, 6]).last()
                    summary = BillingInstallmentPaidSummary.objects.filter(installment__in=pay_principle,
                                                                           payment_method__in=[1, 2, 3, 4, 5, 6]).last()
                    if summary:
                        utc_datetime = summary.created_at.replace(tzinfo=timezone.utc)
                        desired_timezone = pytz.timezone(user.company.timezone)  # Adjust to your desired timezone
                        summary_date = utc_datetime.astimezone(desired_timezone)
                        installment_dictionary['created_at'] = summary_date
                        # installment_dictionary['created_at'] = summary.created_at if summary else None
                        installment_dictionary['last_payment'] = (
                                                                     summary.payment_toward_principle if summary else 0) + (
                                                                     summary.payment_toward_fine if summary else 0)
                    else:
                        installment_dictionary['created_at'] = None
                        installment_dictionary['last_payment'] = 0
                else:
                    installment_dictionary['created_at'] = None
                    installment_dictionary['last_payment'] = 0
                financial = FinancialResponsible.objects.filter(price_quote_contract__id=obj.id).last()
                name = financial.client.name
                client_ = ClientCaseContract.objects.filter(contract__id=obj.id).last()
                client_id = client_.client.client_id if client_ else ''
                case = client_.case.id if client_ else None
                installment_dictionary['name'] = name if name else ""
                installment_dictionary['primary_beneficiary'] = get_primary_beneficiary(obj)
                installment_dictionary['contract_id'] = obj.client_contract_id if obj.client_contract_id else ""
                installment_dictionary['contract_category'] = get_case_category(obj)
                installment_dictionary['client_id'] = client_id if client_id else ""
                installment_dictionary['case_id'] = get_case_ids(obj)
                # total remaining gov fee
                remaining_gov_fee = \
                    MiscellaneousFee.objects.filter(client_contract__id=obj.id, amount_added=True,
                                                    status__in=[1, 3], cancel=False,
                                                    type='government_fee').aggregate(Sum('amount'))['amount__sum']
                paid_gov_fee = \
                    MiscellaneousFee.objects.filter(client_contract__id=obj.id, amount_added=False,
                                                    type='government_fee').aggregate(Sum('amount'))['amount__sum']
                all_adjustment_gov_fee = \
                    MiscellaneousFee.objects.filter(client_contract__id=obj.id, amount_added=True, status=7,
                                                    type='government_fee').aggregate(Sum('amount'))['amount__sum']

                installment_dictionary['total_remaining_government_fee'] = (
                                                                               remaining_gov_fee if remaining_gov_fee else 0) - (
                                                                               paid_gov_fee if paid_gov_fee else 0) + (
                                                                               all_adjustment_gov_fee if all_adjustment_gov_fee else 0)
                # total_remaining_mis_fee
                remaining_mis_fee = \
                    MiscellaneousFee.objects.filter(client_contract__id=obj.id, type='miscellaneous',
                                                    amount_added=True, status__in=[1, 3], cancel=False).aggregate(
                        Sum('amount'))['amount__sum']
                paid_mis_fee = \
                    MiscellaneousFee.objects.filter(client_contract__id=obj.id, type='miscellaneous',
                                                    amount_added=False).aggregate(Sum('amount'))['amount__sum']
                all_adjustment_mis_fee = \
                    MiscellaneousFee.objects.filter(client_contract__id=obj.id, amount_added=True, status=7,
                                                    type='miscellaneous').aggregate(Sum('amount'))['amount__sum']
                installment_dictionary['total_remaining_miscellaneous_fee'] = (
                                                                                  remaining_mis_fee if remaining_mis_fee else 0) - (
                                                                                  paid_mis_fee if paid_mis_fee else 0) + (
                                                                                  all_adjustment_mis_fee if all_adjustment_mis_fee else 0)
                # total remaining attorney fee
                price_quote = PriceQuote.objects.filter(id=obj.price_quote.id).last()
                service_request = PriceQuoteServiceRequest.objects.filter(
                    price_quote__id=price_quote.id)
                total_legal_fee = 0
                for service in service_request:
                    total_legal_fee += service.total_legal_fee
                total_summary = FixedBillingTransactionHistory.objects.filter(client_contract__id=obj.id, status=3)
                additional_term_fee = 0
                for obj_summary in total_summary:
                    additional_term_fee += obj_summary.additional_term_fee if obj_summary.additional_term_fee else 0
                paid_billing = BillingInstallmentPaidSummary.objects.filter(
                    installment__client_contract__id=obj.id).last()
                installment_dictionary['total_contract_amount'] = (total_legal_fee if total_legal_fee else 0)
                installment_dictionary['total_remaining_attorney_fee'] = (total_legal_fee if total_legal_fee else 0) + (
                    additional_term_fee if additional_term_fee else 0) - \
                                                                         ((
                                                                             paid_billing.attorney_fee_paid_breakdown if paid_billing else 0))
                attorney_fee.append(installment_dictionary)
            summary_dict = dict()
            summary_dict['delayed_payments'] = attorney_fee
            return Response(summary_dict, status=status.HTTP_200_OK)
        except Exception as e:
            return Response({ERROR: REST_ERR_GENERIC, MESSAGE: str(e)}, status=status.HTTP_400_BAD_REQUEST)


# retainer threshold amount delayed contract
class DelayedRetainerContractFeeReportViewSet(mixins.ListModelMixin,
                                              GenericViewSet):
    authentication_classes = (CompanyUserAuthentication,)

    def list(self, request, *args, **kwargs):
        try:
            auth_token = request.META['HTTP_AUTHORIZATION']
            user = CompanySessions.objects.filter(auth_token__exact=auth_token, is_active=True).last().user
            contracts = ClientReservationContract.objects.filter(office__id=user.office.id, contract_fully_paid=False,
                                                                 sign_contract=True, signature=True,
                                                                 add_cases=True, is_low_amount=True).order_by('-id')
            # immigration_contract = contracts.filter(reservation__consalatation_reason__code='immigration')
            # family_contract = contracts.filter(reservation__consalatation_reason__code='familylaw')
            # delay_imm_contract = contracts.filter(reservation__consalatation_reason__code='delayed_immigration')
            # contracts = chain(immigration_contract, family_contract, delay_imm_contract)
            retainer_fee = list()
            for obj in contracts:
                installment_dictionary = dict()
                if obj.created_by:
                    if obj.created_by.employee:
                        received_by = (
                                          obj.created_by.employee.first_name if obj.created_by else "") + " " + (
                                          obj.created_by.employee.last_name if obj.created_by else "")
                    elif obj.created_by.company:
                        received_by = obj.created_by.company.title if obj.created_by else ""
                    else:
                        received_by = ""
                else:
                    received_by = ""
                installment_dictionary['received_by'] = received_by
                today = timezone.localtime(timezone.now()).date()
                low_threshold_day = obj.low_amount_date
                date_difference = today - low_threshold_day
                installment_dictionary['no_of_days'] = date_difference.days
                price_quote = PriceQuote.objects.filter(id=obj.price_quote.id).last()
                service_request = PriceQuoteServiceRequest.objects.filter(price_quote__id=price_quote.id)
                retainer_amount = 0
                for obj_ in service_request:
                    retainer_amount += obj_.retainer_amount
                installment_dictionary['retainer_amount'] = retainer_amount if retainer_amount else 0
                installment_dictionary['threshold_amount'] = obj.threshold_amount if obj.threshold_amount else 0
                balance = BillingRetainerHistory.objects.filter(office__id=user.office.id,
                                                                client_contract__id=obj.id).order_by(
                    'sort_order').last()
                balance_ = balance.current_balance
                scientific_number = Decimal(balance_)
                rounded_number = scientific_number.quantize(Decimal('1.00'), rounding=ROUND_HALF_UP)
                installment_dictionary['current_amount'] = rounded_number if rounded_number else 0
                pay_principle = BillingRetainerHistory.objects.filter(office__id=user.office.id,
                                                                      client_contract__id=obj.id,
                                                                      retainer_type=2).last()
                if pay_principle:
                    utc_datetime = pay_principle.created_at.replace(tzinfo=timezone.utc)
                    desired_timezone = pytz.timezone(user.company.timezone)  # Adjust to your desired timezone
                    pay_principle_date = utc_datetime.astimezone(desired_timezone)
                    installment_dictionary['created_at'] = pay_principle_date
                    # installment_dictionary['created_at'] = pay_principle.created_at if pay_principle else None
                    installment_dictionary['last_payment'] = pay_principle.net_amount if pay_principle else 0
                else:
                    installment_dictionary['created_at'] = None
                    installment_dictionary['last_payment'] = 0
                financial = FinancialResponsible.objects.filter(price_quote_contract__id=obj.id).last()
                name = financial.client.name
                client_ = ClientCaseContract.objects.filter(contract__id=obj.id).last()
                client_id = client_.client.client_id if client_ else ''
                installment_dictionary['name'] = name if name else ""
                installment_dictionary['primary_beneficiary'] = get_primary_beneficiary(obj)
                installment_dictionary['contract_id'] = obj.client_contract_id if obj.client_contract_id else ""
                installment_dictionary['contract_category'] = get_case_category(obj)
                installment_dictionary['client_id'] = client_id if client_id else ""
                installment_dictionary['case_id'] = get_case_ids(obj)
                retainer_fee.append(installment_dictionary)
            summary_dict = dict()
            summary_dict['below_threshold_amount'] = retainer_fee
            return Response(summary_dict, status=status.HTTP_200_OK)
        except Exception as e:
            return Response({ERROR: REST_ERR_GENERIC, MESSAGE: str(e)}, status=status.HTTP_400_BAD_REQUEST)
